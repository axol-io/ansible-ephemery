#!/bin/bash
#
# Ephemery Reset Script
# This script resets the Ephemery testnet nodes to the latest iteration.
# Automatically generated by Ansible.
#

set -e

# Configuration
HOME_DIR="{{ home_dir }}"
DATA_DIR="{{ ephemery_data_dir }}"
CONFIG_DIR="{{ ephemery_config_dir | default(home_dir + '/config') }}"
LOG_DIR="{{ ephemery_logs_dir }}"
GENESIS_REPO="ephemery-testnet/ephemery-genesis"

# Create log directory if it doesn't exist
mkdir -p "$LOG_DIR"

logtime() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

logtime "Starting Ephemery reset process"

# Stop containers
logtime "Stopping containers..."
docker stop ephemery-{{ el }} ephemery-{{ cl }} || echo "Warning: Failed to stop one or more containers"

# Clear data directories but preserve nodekey if exists (for consistent peer ID)
logtime "Clearing data directories..."
if [ -f "${DATA_DIR}/{{ el }}/geth/nodekey" ] && [ "{{ el }}" = "geth" ]; then
    NODEKEY=$(cat "${DATA_DIR}/{{ el }}/geth/nodekey")
    rm -rf "${DATA_DIR}/{{ el }}/"*
    mkdir -p "${DATA_DIR}/{{ el }}/geth"
    echo "$NODEKEY" > "${DATA_DIR}/{{ el }}/geth/nodekey"
    logtime "Preserved Geth nodekey"
else
    rm -rf "${DATA_DIR}/{{ el }}/"*
fi

rm -rf "${DATA_DIR}/{{ cl }}/"*

# Download latest genesis files
logtime "Downloading latest genesis files..."
LATEST_RELEASE=$(curl --silent "https://api.github.com/repos/$GENESIS_REPO/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | head -n 1)

if [ -z "$LATEST_RELEASE" ]; then
    logtime "Error: Failed to get latest release. Using 'latest' as fallback."
    LATEST_RELEASE="latest"
fi

logtime "Latest release: $LATEST_RELEASE"
mkdir -p "$CONFIG_DIR"
wget -qO- "https://github.com/$GENESIS_REPO/releases/download/$LATEST_RELEASE/testnet-all.tar.gz" | tar xvz -C "$CONFIG_DIR"

# Initialize execution client based on type
{% if el == "geth" %}
# Initialize Geth
logtime "Initializing Geth with new genesis..."
docker run --rm -v "${DATA_DIR}/{{ el }}:/data" -v "${CONFIG_DIR}:/config" pk910/ephemery-{{ el }} geth init --datadir=/data /config/genesis.json
{% elif el == "nethermind" %}
# Nethermind doesn't need initialization, it will use the genesis file directly
logtime "Nethermind will use the genesis file directly, no initialization needed."
{% elif el == "besu" %}
# Besu doesn't need initialization, it will use the genesis file directly
logtime "Besu will use the genesis file directly, no initialization needed."
{% elif el == "erigon" %}
# Initialize Erigon
logtime "Initializing Erigon with new genesis..."
docker run --rm -v "${DATA_DIR}/{{ el }}:/data" -v "${CONFIG_DIR}:/config" pk910/ephemery-{{ el }} erigon init --datadir=/data /config/genesis.json
{% elif el == "reth" %}
# Reth doesn't need initialization, it will use the genesis file directly
logtime "Reth will use the genesis file directly, no initialization needed."
{% endif %}

# Start containers with retry logic
logtime "Starting execution client container..."
docker start ephemery-{{ el }} || {
    logtime "Failed to start execution client"
    exit 1
}

logtime "Waiting for execution client to start..."
sleep 15  # Wait for execution client to start

logtime "Starting consensus client container..."
docker start ephemery-{{ cl }} || {
    logtime "Failed to start consensus client"
    exit 1
}

# Restart monitoring if enabled
{% if monitoring_enabled | default(false) %}
logtime "Restarting monitoring services..."
docker restart prometheus || echo "Warning: Failed to restart Prometheus"
docker restart grafana-agent || echo "Warning: Failed to restart Grafana agent"
{% else %}
logtime "Monitoring not enabled, skipping restart of monitoring services."
{% endif %}

logtime "Ephemery reset completed successfully"
