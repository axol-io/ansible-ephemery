#!/bin/bash

# This script is auto-generated by Ansible

# Extract variables directly from Ansible environment
telegram_bot_token="{{ telegram_bot_token | default('') }}"
telegram_chat_id="{{ telegram_chat_id | default('') }}"
server_ip="{{ ansible_default_ipv4.address }}"  # Use the current server's IP

# Define log file paths
log_directory="{{ home_dir }}/ephemery/logs"
success_log="${log_directory}/success.log"
error_log="${log_directory}/error.log"
alert_log="${log_directory}/alert.log"

# Create the log directory if it does not exist
mkdir -p "${log_directory}"

# Construct the Telegram base URL
telegram_url="https://api.telegram.org/bot${telegram_bot_token}/sendMessage"

# Function to send an alert to Telegram channel
send_alert() {
  local message="$1"
  local last_alert_time=$(tail -n 1 "${alert_log}" 2>/dev/null || echo "0")
  local current_time=$(date "+%s")

  # Only send alert if telegram variables are set

  if [ -n "${telegram_bot_token}" ] && [ -n "${telegram_chat_id}" ]; then
    if (( current_time - last_alert_time >= 300 )); then  # 5 minutes between alerts
      curl -s -X POST "${telegram_url}" \
        -d "chat_id=${telegram_chat_id}" \
        -d "text=${message}" > /dev/null
      echo "${current_time}" >> "${alert_log}"
    fi
  else
    echo "Telegram notification skipped - bot token or chat ID not configured"
  fi
}

# Check execution client (EL) health
current_time=$(date "+%Y-%m-%d %H:%M:%S")
el_response=$(curl -s http://localhost:8545 -X POST -H "Content-Type: application/json" \
  --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' | jq -r '.result')

if [ -z "$el_response" ] || [ "$el_response" == "null" ]; then
  message="ðŸ”´ ALERT: Execution Client ({{ el }}) health check failed on ${server_ip}"
  echo "[${current_time}] $message" >> "${error_log}"
  send_alert "${message}"
else
  echo "[${current_time}] âœ… SUCCESS: Execution Client ({{ el }}) is healthy: $el_response" >> "${success_log}"
fi

# Check consensus client (CL) health
current_time=$(date "+%Y-%m-%d %H:%M:%S")
cl_status=$(curl -s http://localhost:5052/eth/v1/node/health)
cl_status_code=$?

if [ $cl_status_code -ne 0 ]; then
  message="ðŸ”´ ALERT: Consensus Client ({{ cl }}) health check failed on ${server_ip} with status code $cl_status_code"
  echo "[${current_time}] $message" >> "${error_log}"
  send_alert "${message}"
else
  echo "[${current_time}] âœ… SUCCESS: Consensus Client ({{ cl }}) is healthy" >> "${success_log}"
fi

# Check Grafana agent health if configured
if [ -n "{{ grafana_agent_http_port | default('') }}" ]; then
  current_time=$(date "+%Y-%m-%d %H:%M:%S")
  agent_response=$(curl -s http://localhost:{{ grafana_agent_http_port }}/-/healthy)

  if [ "$agent_response" != "Agent is Healthy." ]; then
    message="ðŸ”´ ALERT: Grafana Agent health check failed on ${server_ip}"
    echo "[${current_time}] $message" >> "${error_log}"
    send_alert "${message}"
  else
    echo "[${current_time}] âœ… SUCCESS: Grafana Agent is healthy" >> "${success_log}"
  fi
fi
