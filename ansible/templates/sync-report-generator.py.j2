#!/usr/bin/env python3
# Sync Status Report Generator
# Autogenerated by Ansible from sync-report-generator.py.j2
#
# This script generates an HTML report from the sync status history data
# collected by the sync-monitor.sh script.

import json
import os
import time
from datetime import datetime

# Configuration from Ansible
HISTORY_FILE = "{{ history_path }}"
REPORT_FILE = "{{ report_path }}"
EL_CLIENT = "{{ el_client }}"
CL_CLIENT = "{{ cl_client }}"

# Check if history file exists
if not os.path.exists(HISTORY_FILE):
    print(f"Error: History file {HISTORY_FILE} not found")
    exit(1)

# Load sync history data
try:
    with open(HISTORY_FILE, 'r') as f:
        data = json.load(f)
except json.JSONDecodeError:
    print(f"Error: Invalid JSON in {HISTORY_FILE}")
    exit(1)
except Exception as e:
    print(f"Error reading {HISTORY_FILE}: {str(e)}")
    exit(1)

sync_history = data.get('sync_history', [])

if not sync_history:
    print("No sync history data found")
    # Create empty report
    with open(REPORT_FILE, 'w') as f:
        f.write("<html><body><h1>No Sync Data Available</h1><p>Sync monitoring has not collected any data yet.</p></body></html>")
    exit(0)

# Calculate sync metrics
# Sort history by timestamp to ensure chronological order
sync_history.sort(key=lambda x: x.get('timestamp', 0))

# Get the latest entry
latest_entry = sync_history[-1]

# Prepare execution client metrics
el_current_block = latest_entry.get('current_block')
el_highest_block = latest_entry.get('highest_block')
el_synced = latest_entry.get('el_synced', False)

# Calculate block sync progress
el_progress = 0
if el_current_block is not None and el_highest_block is not None and el_highest_block > 0:
    el_progress = min(100, (el_current_block / el_highest_block) * 100)

# Prepare consensus client metrics
cl_sync_distance = latest_entry.get('cl_sync_distance')
cl_head_slot = latest_entry.get('cl_head_slot')
cl_status = latest_entry.get('cl_status', 'unknown')

# Calculate sync speeds
block_speeds = []
slot_speeds = []

if len(sync_history) > 1:
    for i in range(1, len(sync_history)):
        current = sync_history[i]
        previous = sync_history[i-1]

        # Calculate time difference
        time_diff = current.get('timestamp', 0) - previous.get('timestamp', 0)
        if time_diff <= 0:
            continue

        # Calculate block speed
        if current.get('current_block') is not None and previous.get('current_block') is not None:
            block_diff = current.get('current_block') - previous.get('current_block')
            if block_diff >= 0:  # Only count positive progress
                blocks_per_minute = (block_diff / time_diff) * 60
                block_speeds.append(blocks_per_minute)

        # Calculate slot speed
        if current.get('cl_head_slot') is not None and previous.get('cl_head_slot') is not None:
            slot_diff = current.get('cl_head_slot') - previous.get('cl_head_slot')
            if slot_diff >= 0:  # Only count positive progress
                slots_per_minute = (slot_diff / time_diff) * 60
                slot_speeds.append(slots_per_minute)

# Calculate averages
avg_block_speed = sum(block_speeds) / len(block_speeds) if block_speeds else 0
avg_slot_speed = sum(slot_speeds) / len(slot_speeds) if slot_speeds else 0

# Estimate time to completion for execution client
el_time_remaining = "N/A"
if not el_synced and el_current_block is not None and el_highest_block is not None and avg_block_speed > 0:
    blocks_remaining = el_highest_block - el_current_block
    minutes_remaining = blocks_remaining / avg_block_speed
    hours_remaining = minutes_remaining / 60

    if hours_remaining < 1:
        el_time_remaining = f"{int(minutes_remaining)} minutes"
    else:
        el_time_remaining = f"{int(hours_remaining)} hours, {int(minutes_remaining % 60)} minutes"

# Estimate time to completion for consensus client
cl_time_remaining = "N/A"
if cl_status != "synced" and cl_sync_distance is not None and cl_sync_distance > 0 and avg_slot_speed > 0:
    slots_remaining = cl_sync_distance
    minutes_remaining = slots_remaining / avg_slot_speed
    hours_remaining = minutes_remaining / 60

    if hours_remaining < 1:
        cl_time_remaining = f"{int(minutes_remaining)} minutes"
    else:
        cl_time_remaining = f"{int(hours_remaining)} hours, {int(minutes_remaining % 60)} minutes"

# Generate system statistics
cpu_values = [entry.get('cpu_usage', 0) for entry in sync_history if entry.get('cpu_usage') is not None]
mem_values = [entry.get('mem_usage', 0) for entry in sync_history if entry.get('mem_usage') is not None]
disk_values = [entry.get('disk_usage', 0) for entry in sync_history if entry.get('disk_usage') is not None]

avg_cpu = sum(cpu_values) / len(cpu_values) if cpu_values else 0
avg_mem = sum(mem_values) / len(mem_values) if mem_values else 0
avg_disk = sum(disk_values) / len(disk_values) if disk_values else 0
max_cpu = max(cpu_values) if cpu_values else 0
max_mem = max(mem_values) if mem_values else 0

# Prepare data for charts
timestamps = [entry.get('date', '') for entry in sync_history]
el_block_values = [entry.get('current_block', 0) for entry in sync_history]
cl_slot_values = [entry.get('cl_head_slot', 0) for entry in sync_history]
cl_distance_values = [entry.get('cl_sync_distance', 0) for entry in sync_history]

# Generate HTML report
html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ethereum Node Sync Status Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
        }}
        .dashboard {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .card {{
            background: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .metric {{
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }}
        .label {{
            color: #666;
            font-size: 14px;
        }}
        .progress-container {{
            height: 20px;
            background-color: #e0e0e0;
            border-radius: 10px;
            margin: 10px 0;
        }}
        .progress-bar {{
            height: 100%;
            border-radius: 10px;
            background-color: #4CAF50;
            transition: width 0.5s;
        }}
        .progress-bar.warning {{
            background-color: #FFC107;
        }}
        .progress-bar.danger {{
            background-color: #F44336;
        }}
        .status {{
            display: inline-block;
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: bold;
        }}
        .status.synced {{
            background-color: #DFF0D8;
            color: #3C763D;
        }}
        .status.syncing {{
            background-color: #FCF8E3;
            color: #8A6D3B;
        }}
        .status.error {{
            background-color: #F2DEDE;
            color: #A94442;
        }}
        .chart-container {{
            margin-top: 30px;
        }}
        h1, h2 {{
            color: #2c3e50;
        }}
        .timestamp {{
            color: #666;
            font-style: italic;
            margin-bottom: 20px;
        }}
    </style>
</head>
<body>
    <h1>Ethereum Node Synchronization Status</h1>
    <div class="timestamp">Last updated: {latest_entry.get('date', 'unknown')}</div>

    <div class="dashboard">
        <div class="card">
            <h2>Execution Client ({EL_CLIENT})</h2>
            <div class="label">Status</div>
            <div class="status {'synced' if el_synced else 'syncing'}">
                {('SYNCED' if el_synced else 'SYNCING')}
            </div>

            <div class="label">Current Block</div>
            <div class="metric">{el_current_block}</div>

            <div class="label">Target Block</div>
            <div class="metric">{el_highest_block}</div>

            <div class="label">Sync Progress</div>
            <div class="progress-container">
                <div class="progress-bar" style="width: {el_progress}%;"></div>
            </div>
            <div>{el_progress:.2f}%</div>

            <div class="label">Avg. Speed</div>
            <div class="metric">{avg_block_speed:.2f} blocks/min</div>

            <div class="label">Est. Time Remaining</div>
            <div class="metric">{el_time_remaining}</div>
        </div>

        <div class="card">
            <h2>Consensus Client ({CL_CLIENT})</h2>
            <div class="label">Status</div>
            <div class="status {'synced' if cl_status == 'synced' else 'syncing'}">
                {cl_status.upper()}
            </div>

            <div class="label">Head Slot</div>
            <div class="metric">{cl_head_slot}</div>

            <div class="label">Sync Distance</div>
            <div class="metric">{cl_sync_distance}</div>

            <div class="label">Avg. Speed</div>
            <div class="metric">{avg_slot_speed:.2f} slots/min</div>

            <div class="label">Est. Time Remaining</div>
            <div class="metric">{cl_time_remaining}</div>
        </div>

        <div class="card">
            <h2>System Resources</h2>
            <div class="label">CPU Usage (avg/max)</div>
            <div class="metric">{avg_cpu:.1f}% / {max_cpu:.1f}%</div>
            <div class="progress-container">
                <div class="progress-bar {'danger' if avg_cpu > 80 else 'warning' if avg_cpu > 60 else ''}" style="width: {min(100, avg_cpu)}%;"></div>
            </div>

            <div class="label">Memory Usage (avg/max)</div>
            <div class="metric">{avg_mem:.1f}% / {max_mem:.1f}%</div>
            <div class="progress-container">
                <div class="progress-bar {'danger' if avg_mem > 80 else 'warning' if avg_mem > 60 else ''}" style="width: {min(100, avg_mem)}%;"></div>
            </div>

            <div class="label">Disk Usage</div>
            <div class="metric">{avg_disk:.1f}%</div>
            <div class="progress-container">
                <div class="progress-bar {'danger' if avg_disk > 80 else 'warning' if avg_disk > 60 else ''}" style="width: {min(100, avg_disk)}%;"></div>
            </div>
        </div>
    </div>

    <div class="chart-container">
        <h2>Synchronization Progress</h2>
        <canvas id="syncChart"></canvas>
    </div>

    <div class="chart-container">
        <h2>System Resource Usage</h2>
        <canvas id="resourceChart"></canvas>
    </div>

    <script>
        // Sync Progress Chart
        const syncCtx = document.getElementById('syncChart').getContext('2d');
        const syncChart = new Chart(syncCtx, {{
            type: 'line',
            data: {{
                labels: {json.dumps(timestamps)},
                datasets: [
                    {{
                        label: '{EL_CLIENT} Block Height',
                        data: {json.dumps(el_block_values)},
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        tension: 0.1,
                        yAxisID: 'y'
                    }},
                    {{
                        label: '{CL_CLIENT} Head Slot',
                        data: {json.dumps(cl_slot_values)},
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1,
                        yAxisID: 'y'
                    }},
                    {{
                        label: '{CL_CLIENT} Sync Distance',
                        data: {json.dumps(cl_distance_values)},
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        tension: 0.1,
                        yAxisID: 'y1'
                    }}
                ]
            }},
            options: {{
                responsive: true,
                interaction: {{
                    mode: 'index',
                    intersect: false,
                }},
                scales: {{
                    y: {{
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {{
                            display: true,
                            text: 'Block/Slot Number'
                        }}
                    }},
                    y1: {{
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {{
                            display: true,
                            text: 'Sync Distance'
                        }},
                        grid: {{
                            drawOnChartArea: false,
                        }},
                    }}
                }}
            }}
        }});

        // Resource Usage Chart
        const resourceCtx = document.getElementById('resourceChart').getContext('2d');
        const resourceChart = new Chart(resourceCtx, {{
            type: 'line',
            data: {{
                labels: {json.dumps(timestamps)},
                datasets: [
                    {{
                        label: 'CPU Usage %',
                        data: {json.dumps(cpu_values)},
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        tension: 0.1
                    }},
                    {{
                        label: 'Memory Usage %',
                        data: {json.dumps(mem_values)},
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        tension: 0.1
                    }},
                    {{
                        label: 'Disk Usage %',
                        data: {json.dumps(disk_values)},
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1
                    }}
                ]
            }},
            options: {{
                responsive: true,
                scales: {{
                    y: {{
                        min: 0,
                        max: 100,
                        title: {{
                            display: true,
                            text: 'Usage %'
                        }}
                    }}
                }}
            }}
        }});
    </script>
</body>
</html>
"""

# Write the HTML report
with open(REPORT_FILE, 'w') as f:
    f.write(html)

print(f"Sync status report generated at {REPORT_FILE}")
exit(0)
