#!/bin/bash
# Docker network connectivity test script for Ephemery nodes
# This script checks and validates Docker network configuration and connectivity

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "=== Docker Network Validation ==="
echo "Network name: {{ docker_network_name }}"
echo "Expected subnet: {{ docker_network_subnet | default('172.20.0.0/16') }}"

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
  echo -e "${RED}ERROR: Docker is not running!${NC}"
  exit 1
fi

# Check if the network exists
if ! docker network ls | grep -q {{ docker_network_name }}; then
  echo -e "${RED}ERROR: Docker network '{{ docker_network_name }}' does not exist!${NC}"
  echo "Creating network..."
  docker network create --subnet={{ docker_network_subnet | default('172.20.0.0/16') }} {{ docker_network_name }}
  if [ $? -ne 0 ]; then
    echo -e "${RED}ERROR: Failed to create Docker network!${NC}"
    exit 1
  else
    echo -e "${GREEN}SUCCESS: Created Docker network '{{ docker_network_name }}'${NC}"
  fi
else
  echo -e "${GREEN}Docker network '{{ docker_network_name }}' exists${NC}"
fi

# Validate network subnet
ACTUAL_SUBNET=$(docker network inspect {{ docker_network_name }} | grep -o '"Subnet": "[^"]*"' | cut -d'"' -f4)
EXPECTED_SUBNET="{{ docker_network_subnet | default('172.20.0.0/16') }}"

if [ "$ACTUAL_SUBNET" != "$EXPECTED_SUBNET" ]; then
  echo -e "${YELLOW}WARNING: Network subnet mismatch!${NC}"
  echo "Expected: $EXPECTED_SUBNET"
  echo "Actual: $ACTUAL_SUBNET"

  if [ "{{ docker_network_recreate | default('false') }}" = "true" ]; then
    echo "Recreating network with correct subnet..."
    docker network rm {{ docker_network_name }}
    docker network create --subnet=$EXPECTED_SUBNET {{ docker_network_name }}
    if [ $? -ne 0 ]; then
      echo -e "${RED}ERROR: Failed to recreate Docker network!${NC}"
      exit 1
    else
      echo -e "${GREEN}SUCCESS: Recreated Docker network with correct subnet${NC}"
    fi
  else
    echo -e "${YELLOW}To recreate the network with the correct subnet, set docker_network_recreate to true${NC}"
  fi
else
  echo -e "${GREEN}Network subnet is correct${NC}"
fi

# Check container connectivity
echo -e "\n=== Container Connectivity Test ==="

# Check if the containers are running
if ! docker ps | grep -q {{ el }}-container; then
  echo -e "${YELLOW}WARNING: {{ el }}-container is not running${NC}"
elif ! docker ps | grep -q {{ cl_client_name }}-container; then
  echo -e "${YELLOW}WARNING: {{ cl_client_name }}-container is not running${NC}"
else
  # Both containers are running, test connectivity
  echo "Both containers are running, testing connectivity..."

  # Get container IPs
  EL_IP=$(docker inspect -f '{% raw %}{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}{% endraw %}' {{ el }}-container)
  CL_IP=$(docker inspect -f '{% raw %}{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}{% endraw %}' {{ cl_client_name }}-container)

  echo "{{ el }}-container IP: $EL_IP"
  echo "{{ cl_client_name }}-container IP: $CL_IP"

  # Check if containers are on the correct network
  EL_NETWORK=$(docker inspect -f '{% raw %}{{range $k,$v := .NetworkSettings.Networks}}{{$k}}{{end}}{% endraw %}' {{ el }}-container)
  CL_NETWORK=$(docker inspect -f '{% raw %}{{range $k,$v := .NetworkSettings.Networks}}{{$k}}{{end}}{% endraw %}' {{ cl_client_name }}-container)

  if [ "$EL_NETWORK" != "{{ docker_network_name }}" ]; then
    echo -e "${RED}ERROR: {{ el }}-container is on network '$EL_NETWORK' instead of '{{ docker_network_name }}'${NC}"
    echo "To fix this issue, recreate the container with the correct network:"
    echo "docker stop {{ el }}-container && docker rm {{ el }}-container && docker run ... --network={{ docker_network_name }} ..."
  fi

  if [ "$CL_NETWORK" != "{{ docker_network_name }}" ]; then
    echo -e "${RED}ERROR: {{ cl_client_name }}-container is on network '$CL_NETWORK' instead of '{{ docker_network_name }}'${NC}"
    echo "To fix this issue, recreate the container with the correct network:"
    echo "docker stop {{ cl_client_name }}-container && docker rm {{ cl_client_name }}-container && docker run ... --network={{ docker_network_name }} ..."
  fi

  # Ping test from consensus client to execution client
  echo "Testing connectivity from {{ cl_client_name }} to {{ el }}..."
  if docker exec {{ cl_client_name }}-container ping -c 1 $EL_IP >/dev/null 2>&1; then
    echo -e "${GREEN}SUCCESS: {{ cl_client_name }} can reach {{ el }}${NC}"
  else
    echo -e "${RED}ERROR: {{ cl_client_name }} cannot ping {{ el }}${NC}"
    echo "This is a critical communication issue. Consider recreating the network and containers."
  fi

  # Test Engine API connectivity (more reliable than ping)
  echo "Testing Engine API connectivity..."
  JWT=$(cat {{ jwt_secret_path }})
  if docker exec {{ cl_client_name }}-container curl -s -H "Content-Type: application/json" -H "Authorization: Bearer $JWT" \
     --data '{"jsonrpc":"2.0","method":"engine_getPayloadV1","params":["0x0"],"id":1}' http://$EL_IP:8551 | grep -q "jsonrpc"; then
    echo -e "${GREEN}SUCCESS: Engine API connectivity works${NC}"
  else
    echo -e "${RED}ERROR: Engine API connectivity test failed${NC}"
    echo "This suggests issues with JWT authentication or network connectivity."
    echo "Verify the JWT token is the same in both containers and check firewall settings."
  fi
fi

# Check container DNS resolution
echo -e "\n=== DNS Resolution Test ==="
if docker ps | grep -q {{ cl_client_name }}-container; then
  echo "Testing DNS resolution from {{ cl_client_name }}..."

  if docker exec {{ cl_client_name }}-container ping -c 1 {{ el }}-container >/dev/null 2>&1; then
    echo -e "${GREEN}SUCCESS: Container DNS resolution works${NC}"
  else
    echo -e "${YELLOW}WARNING: Container DNS resolution failed${NC}"
    echo "Using IP addresses for communication should still work."
    echo "For better DNS resolution, consider using Docker Compose."
  fi
fi

echo -e "\n=== Network Test Complete ==="
