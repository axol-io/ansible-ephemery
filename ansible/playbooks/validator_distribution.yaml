---
# Validator Key Distribution for Multi-Node Ephemery
# This playbook distributes validator keys across multiple nodes in a cluster

- name: Distribute Validator Keys Across Nodes
  hosts: distributed_validators
  become: true
  vars:
    genesis_validator_enabled: "{{ genesis_validator | default(false) }}"
    validator_keys_base_dir: "{{ ephemery_base_dir | default('/root/ephemery') }}/keys/validator_keys"
    validator_secrets_dir: "{{ ephemery_base_dir | default('/root/ephemery') }}/secrets/validator"
    validator_start_index: "{{ validator_start_index | default(0) }}"
    validator_count: "{{ validator_count | default(10) }}"
  
  tasks:
    - name: Check if this is a distributed validator deployment
      ansible.builtin.set_fact:
        distributed_deployment: true
      failed_when: not (validator_enabled | default(false) | bool)
    
    - name: Create validator directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
      loop:
        - "{{ validator_keys_base_dir }}"
        - "{{ validator_secrets_dir }}/keys"
        - "{{ validator_secrets_dir }}/passwords"
    
    - name: Generate or copy master validator key set
      ansible.builtin.include_tasks: tasks/validator_key_generation.yaml
      when: inventory_hostname == groups['distributed_validators'][0]
    
    - name: Synchronize master keys to other nodes
      ansible.builtin.synchronize:
        src: "{{ validator_keys_base_dir }}/"
        dest: "{{ validator_keys_base_dir }}"
        mode: push
      delegate_to: "{{ groups['distributed_validators'][0] }}"
      when: inventory_hostname != groups['distributed_validators'][0]
    
    - name: Calculate key range for this node
      ansible.builtin.set_fact:
        key_range_start: "{{ validator_start_index }}"
        key_range_end: "{{ validator_start_index + validator_count }}"
    
    - name: Create node-specific validator key subset
      ansible.builtin.shell: |
        # Create a clean subset directory
        mkdir -p {{ validator_secrets_dir }}/keys_subset
        
        # Find keystore files in the specified range
        find {{ validator_keys_base_dir }}/keys -name "keystore-*.json" | sort | \
        sed -n "{{ key_range_start + 1 }},{{ key_range_end }}p" | \
        while read keyfile; do
          # Extract validator public key from filename
          basename="${keyfile##*/}"
          # Copy key file to subset directory
          cp "$keyfile" {{ validator_secrets_dir }}/keys_subset/
          # Create password file
          echo "ephemery" > {{ validator_secrets_dir }}/passwords/${basename%.json}.txt
        done
        
        # Count selected keys
        KEY_COUNT=$(ls {{ validator_secrets_dir }}/keys_subset | wc -l)
        echo "Selected $KEY_COUNT validator keys for node {{ inventory_hostname }}"
        
        # Move keys to final location
        rm -rf {{ validator_secrets_dir }}/keys/*
        mv {{ validator_secrets_dir }}/keys_subset/* {{ validator_secrets_dir }}/keys/
        rmdir {{ validator_secrets_dir }}/keys_subset
      args:
        executable: /bin/bash
      register: key_subset_result
    
    - name: Display key distribution result
      ansible.builtin.debug:
        msg: "{{ key_subset_result.stdout_lines }}"
    
    - name: Configure validator client
      ansible.builtin.include_tasks: "tasks/configure_validator_{{ cl }}.yaml"
      vars:
        validator_keys_dir: "{{ validator_secrets_dir }}/keys"
        validator_passwords_dir: "{{ validator_secrets_dir }}/passwords"
    
    - name: Start validator client
      community.docker.docker_container:
        name: "ephemery-validator-{{ cl }}"
        image: "{{ client_images[cl ~ '-validator'] | default(client_images[cl]) }}"
        state: started
        restart_policy: unless-stopped
        network_mode: host
        volumes:
          - "{{ validator_secrets_dir }}:/data/validator"
          - "{{ ephemery_base_dir }}/jwt.hex:/jwt.hex"
          - "{{ ephemery_base_dir }}/config/ephemery_network:/ephemery_config"
        command: >
          {% if cl == "lighthouse" %}
          lighthouse vc
          --datadir=/data/validator
          --beacon-nodes=http://127.0.0.1:5052
          --testnet-dir=/ephemery_config
          --metrics
          --metrics-address=0.0.0.0
          --metrics-port=5064
          --graffiti="multi-node-{{ inventory_hostname }}"
          {% elif cl == "teku" %}
          validator-client
          --data-path=/data/validator
          --beacon-node-api-endpoint=http://127.0.0.1:5052
          --network=/ephemery_config
          --metrics-enabled=true
          --metrics-host-allowlist=*
          --metrics-port=5064
          --validators-graffiti="multi-node-{{ inventory_hostname }}"
          {% elif cl == "prysm" %}
          validator
          --datadir=/data/validator
          --beacon-rpc-provider=127.0.0.1:5052
          --chain-config-file=/ephemery_config/config.yaml
          --web
          --graffiti="multi-node-{{ inventory_hostname }}"
          --monitoring-host=0.0.0.0
          --monitoring-port=5064
          {% elif cl == "lodestar" %}
          validator
          --dataDir=/data/validator
          --beaconNodes=http://127.0.0.1:5052
          --ephemery-network
          --metrics.enabled=true
          --metrics.address=0.0.0.0
          --metrics.port=5064
          --graffiti="multi-node-{{ inventory_hostname }}"
          {% endif %}
      when: validator_enabled | bool

    - name: Register validator in monitoring system
      ansible.builtin.shell: |
        echo "{{ inventory_hostname }} validator keys: {{ validator_count }} (indices {{ validator_start_index }}-{{ validator_start_index + validator_count - 1 }})" >> {{ ephemery_base_dir }}/logs/validator_distribution.log
      args:
        executable: /bin/bash
      delegate_to: "{{ monitoring_host }}" 