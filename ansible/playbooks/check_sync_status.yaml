---
# Playbook to check sync status of Ethereum clients
- name: Check sync status of Ethereum clients
  hosts: ephemery
  gather_facts: true
  tasks:
    - name: Check if Docker is running
      ansible.builtin.command: systemctl status docker
      register: docker_status
      changed_when: false
      failed_when: false

    - name: Check if Geth container is running
      ansible.builtin.command: docker ps -f name=ephemery-geth -q
      register: geth_container
      changed_when: false
      failed_when: false

    - name: Check if Lighthouse container is running
      ansible.builtin.command: docker ps -f name=ephemery-lighthouse -q
      register: lighthouse_container
      changed_when: false
      failed_when: false

    - name: Check if Validator container is running
      ansible.builtin.command: docker ps -f name=ephemery-validator-lighthouse -q
      register: validator_container
      changed_when: false
      failed_when: false

    # Get system resource usage
    - name: Check system memory usage
      ansible.builtin.shell: set -o pipefail && free -m | grep Mem | awk '{print $3/$2 * 100.0}'
      register: memory_usage
      changed_when: false
      failed_when: false

    - name: Check system CPU usage
      ansible.builtin.shell: set -o pipefail && top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}'
      register: cpu_usage
      changed_when: false
      failed_when: false

    - name: Check disk usage
      ansible.builtin.shell: set -o pipefail && df -h / | grep / | awk '{print $5}' | sed 's/%//'
      register: disk_usage
      changed_when: false
      failed_when: false

    - name: Display resource usage
      ansible.builtin.debug:
        msg:
          - "Memory Usage: {{ memory_usage.stdout | float | round(2) }}%"
          - "CPU Usage: {{ cpu_usage.stdout | float | round(2) }}%"
          - "Disk Usage: {{ disk_usage.stdout | float | round(2) }}%"

    # Check Geth sync status
    - name: Get Geth sync status
      ansible.builtin.uri:
        url: http://localhost:8545
        method: POST
        body_format: json
        body: '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}'
        return_content: true
      register: geth_sync
      failed_when: false
      when: geth_container.stdout != ""

    - name: Display Geth sync status
      ansible.builtin.debug:
        msg: >-
          {% if geth_sync.json.result == false %}
          Geth is fully synced
          {% elif geth_sync.json.result.currentBlock is defined %}
          Geth is syncing - Current Block: {{ (geth_sync.json.result.currentBlock | int(0, 16)) }},
          Highest Block: {{ (geth_sync.json.result.highestBlock | int(0, 16)) }},
          Sync Progress: {{ ((geth_sync.json.result.currentBlock | int(0, 16)) / (geth_sync.json.result.highestBlock | int(0,
          16)) * 100) | round(2) if geth_sync.json.result.highestBlock | int(0, 16) > 0 else 0 }}%
          {% else %}
          Unable to determine Geth sync status or sync may be stalled
          {% endif %}
      when: geth_container.stdout != "" and geth_sync.status is defined and geth_sync.status == 200

    # Get Geth peer count
    - name: Get Geth peer count
      ansible.builtin.uri:
        url: http://localhost:8545
        method: POST
        body_format: json
        body: '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}'
        return_content: true
      register: geth_peers
      failed_when: false
      when: geth_container.stdout != ""

    - name: Display Geth peer count
      ansible.builtin.debug:
        msg: "Geth has {{ (geth_peers.json.result | default('0x0')) | int(0, 16) }} peers"
      when: geth_container.stdout != "" and geth_peers.status is defined and geth_peers.status == 200

    # Check Lighthouse sync status
    - name: Get Lighthouse sync status
      ansible.builtin.uri:
        url: http://localhost:5052/eth/v1/node/syncing
        method: GET
        return_content: true
      register: lighthouse_sync
      failed_when: false
      when: lighthouse_container.stdout != ""

    - name: Display Lighthouse sync status
      ansible.builtin.debug:
        msg: >-
          {% if lighthouse_sync.json.data.is_syncing %}
          Lighthouse is syncing - Head slot: {{ lighthouse_sync.json.data.head_slot }},
          Sync distance: {{ lighthouse_sync.json.data.sync_distance }}
          {% else %}
          Lighthouse is fully synced
          {% endif %}
      when: lighthouse_container.stdout != "" and lighthouse_sync.status is defined and lighthouse_sync.status == 200

    # Get Lighthouse peer count
    - name: Get Lighthouse peer count
      ansible.builtin.uri:
        url: http://localhost:5052/eth/v1/node/peer_count
        method: GET
        return_content: true
      register: lighthouse_peers
      failed_when: false
      when: lighthouse_container.stdout != ""

    - name: Display Lighthouse peer count
      ansible.builtin.debug:
        msg: "Lighthouse has {{ lighthouse_peers.json.data.connected | default(0) }} peers"
      when: lighthouse_container.stdout != "" and lighthouse_peers.status is defined and lighthouse_peers.status == 200

    # Calculate estimated time to sync completion for Lighthouse
    - name: Calculate estimated time remaining for Lighthouse sync
      ansible.builtin.set_fact:
        sync_estimate: >-
          {% if lighthouse_sync.json.data.is_syncing | default(false) %}
          {% set sync_distance = lighthouse_sync.json.data.sync_distance | int %}
          {% set slots_per_epoch = 32 %}
          {% set seconds_per_slot = 12 %}
          {% set hours = (sync_distance * seconds_per_slot / 3600) | round(1) %}
          {% set days = (hours / 24) | round(1) %}
          Approximately {{ hours }} hours ({{ days }} days) remaining
          {% else %}
          Already synced
          {% endif %}
      when: lighthouse_container.stdout != "" and lighthouse_sync.status is defined and lighthouse_sync.status == 200

    - name: Display estimated sync time
      ansible.builtin.debug:
        msg: "Estimated time to complete Lighthouse sync: {{ sync_estimate }}"
      when: lighthouse_container.stdout != "" and lighthouse_sync.status is defined and lighthouse_sync.status == 200

    # Check for common errors in logs
    - name: Check Geth logs for common errors
      ansible.builtin.shell: set -o pipefail && docker logs ephemery-geth --tail 50 | grep -E "WARN|ERRO" | tail -10
      register: geth_errors
      changed_when: false
      failed_when: false
      when: geth_container.stdout != ""

    - name: Display Geth errors
      ansible.builtin.debug:
        msg: "Recent Geth warnings/errors: {{ geth_errors.stdout_lines | default(['No errors found']) }}"
      when: geth_container.stdout != ""

    - name: Check Lighthouse logs for common errors
      ansible.builtin.shell: set -o pipefail && docker logs ephemery-lighthouse --tail 50 | grep -E "WARN|ERRO" | tail -10
      register: lighthouse_errors
      changed_when: false
      failed_when: false
      when: lighthouse_container.stdout != ""

    - name: Display Lighthouse errors
      ansible.builtin.debug:
        msg: "Recent Lighthouse warnings/errors: {{ lighthouse_errors.stdout_lines | default(['No errors found']) }}"
      when: lighthouse_container.stdout != ""

    # Check Validator logs for common errors
    - name: Check Validator logs for common errors
      ansible.builtin.shell: set -o pipefail && docker logs ephemery-validator-lighthouse --tail 50 | grep -E "WARN|ERRO"
        | tail -10
      register: validator_errors
      changed_when: false
      failed_when: false
      when: validator_container.stdout != ""

    - name: Display Validator errors
      ansible.builtin.debug:
        msg: "Recent Validator warnings/errors: {{ validator_errors.stdout_lines | default(['No errors found']) }}"
      when: validator_container.stdout != ""

    # Check Validator status
    - name: Get Validator status
      ansible.builtin.shell: set -o pipefail && docker logs ephemery-validator-lighthouse --tail 50 | grep -E "INFO|WARN"
        | tail -10
      register: validator_status_logs
      changed_when: false
      failed_when: false
      when: validator_container.stdout != ""

    - name: Set validator status message
      ansible.builtin.set_fact:
        validator_status_message: >-
          {% if validator_container.stdout != '' %}
          {% if validator_status_logs.stdout_lines | length > 0 %}
          Validator is running - Recent logs: {{ validator_status_logs.stdout_lines | join(' | ') }}
          {% else %}
          Validator is running but no recent logs found
          {% endif %}
          {% else %}
          Validator is not running
          {% endif %}
      when: true

    - name: Generate sync status report
      ansible.builtin.debug:
        msg: |
          ===== ETHEREUM CLIENT SYNC STATUS REPORT =====
          Date: {{ ansible_date_time.date }}
          Time: {{ ansible_date_time.time }}

          Container Status:
          - Geth (Execution Client): {{ 'Running' if geth_container.stdout != '' else 'Not Running' }}
          - Lighthouse (Consensus Client): {{ 'Running' if lighthouse_container.stdout != '' else 'Not Running' }}
          - Validator: {{ 'Running' if validator_container.stdout != '' else 'Not Running' }}

          Resource Usage:
          - Memory: {{ memory_usage.stdout | default('0') | float | round(2) }}%
          - CPU: {{ cpu_usage.stdout | default('0') | float | round(2) }}%
          - Disk: {{ disk_usage.stdout | default('0') | float | round(2) }}%

          {% if geth_container.stdout != '' and geth_sync.status is defined and geth_sync.status == 200 %}
          {% if geth_sync.json.result == false %}
          Geth is fully synced
          {% elif geth_sync.json.result.currentBlock is defined %}
          Geth is syncing - Current Block: {{ (geth_sync.json.result.currentBlock | int(0, 16)) }}, Highest Block: {{ (geth_sync.json.result.highestBlock | int(0, 16)) }}, Sync Progress: {{ ((geth_sync.json.result.currentBlock | int(0, 16)) / (geth_sync.json.result.highestBlock | int(0, 16)) * 100) | round(2) if geth_sync.json.result.highestBlock | int(0, 16) > 0 else 0 }}%
          {% else %}
          Unable to determine Geth sync status or sync may be stalled
          {% endif %}
          {% else %}
          Geth sync status unavailable
          {% endif %}

          {% if lighthouse_container.stdout != '' and lighthouse_sync.status is defined and lighthouse_sync.status == 200 %}
          {% if lighthouse_sync.json.data.is_syncing %}
          Lighthouse is syncing - Head slot: {{ lighthouse_sync.json.data.head_slot }}, Sync distance: {{ lighthouse_sync.json.data.sync_distance }}
          {% else %}
          Lighthouse is fully synced
          {% endif %}
          {% else %}
          Lighthouse sync status unavailable
          {% endif %}

          {% if validator_container.stdout != '' %}
          Validator status: {{ validator_status_message }}
          {% else %}
          Validator is not running
          {% endif %}

          {% if sync_estimate is defined %}
          Estimated time to complete sync: {{ sync_estimate }}
          {% endif %}
