---
# Validator key extraction task
# Supports multiple archive formats and provides detailed error reporting

- name: Create temporary extraction directory
  ansible.builtin.file:
    path: '{{ ephemery_base_dir }}/tmp/extraction'
    state: directory
    mode: '0700'  # More secure permissions
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: Check for zip format validator keys
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}/files/validator_keys/validator_keys.zip"
  register: validator_keys_zip
  delegate_to: localhost

- name: Check for tar.gz format validator keys
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}/files/validator_keys/validator_keys.tar.gz"
  register: validator_keys_targz
  delegate_to: localhost

- name: Check for custom path validator keys
  ansible.builtin.stat:
    path: "{{ validator_keys_src | default('files/validator_keys') }}/validator_keys.zip"
  register: custom_keys_zip
  delegate_to: localhost
  when: validator_keys_src is defined

- name: Check for custom path tar.gz validator keys
  ansible.builtin.stat:
    path: "{{ validator_keys_src | default('files/validator_keys') }}/validator_keys.tar.gz"
  register: custom_keys_targz
  delegate_to: localhost
  when: validator_keys_src is defined

- name: Set archive format facts
  ansible.builtin.set_fact:
    archive_format: >-
      {% if validator_keys_zip.stat.exists %}zip
      {% elif validator_keys_targz.stat.exists %}tar.gz
      {% elif custom_keys_zip.stat.exists %}zip
      {% elif custom_keys_targz.stat.exists %}tar.gz
      {% else %}unknown{% endif %}
    archive_src_file: >-
      {% if validator_keys_zip.stat.exists %}{{ lookup('env', 'PWD') }}/files/validator_keys/validator_keys.zip
      {% elif validator_keys_targz.stat.exists %}{{ lookup('env', 'PWD') }}/files/validator_keys/validator_keys.tar.gz
      {% elif custom_keys_zip.stat.exists %}{{ validator_keys_src }}/validator_keys.zip
      {% elif custom_keys_targz.stat.exists %}{{ validator_keys_src }}/validator_keys.tar.gz
      {% else %}unknown{% endif %}

- name: Show detected archive format
  ansible.builtin.debug:
    msg: "Detected validator keys archive format: {{ archive_format }}"

- name: Fail if no validator keys archive found
  ansible.builtin.fail:
    msg: |
      No validator keys archive found. Please place validator keys in one of these locations:
      - {{ lookup('env', 'PWD') }}/files/validator_keys/validator_keys.zip
      - {{ lookup('env', 'PWD') }}/files/validator_keys/validator_keys.tar.gz
      - {{ validator_keys_src | default('not specified') }}/validator_keys.zip
      - {{ validator_keys_src | default('not specified') }}/validator_keys.tar.gz
  when: archive_format == "unknown"

- name: Check if backup should be created before extraction
  ansible.builtin.find:
    paths: '{{ ephemery_base_dir }}/secrets/validator/keys'
    patterns: 'keystore*.json'
  register: existing_validator_keys

- name: Create validator keys backup if they exist
  ansible.builtin.shell: |
    # Check if keys exist and create backup
    if [ -d "{{ ephemery_base_dir }}/secrets/validator/keys" ] && [ "$(ls -A {{ ephemery_base_dir }}/secrets/validator/keys/)" ]; then
      # Create timestamped backup directory
      BACKUP_TIME=$(date +%Y%m%d_%H%M%S)
      BACKUP_DIR="{{ ephemery_base_dir }}/backups/validator/keys/${BACKUP_TIME}"
      mkdir -p "${BACKUP_DIR}"

      # Copy existing keys to backup directory
      cp -a {{ ephemery_base_dir }}/secrets/validator/keys/* "${BACKUP_DIR}/"

      echo "Created validator keys backup in ${BACKUP_DIR}"
      echo "Backed up {{ existing_validator_keys.matched }} keys"
      # Keep track of the latest backup
      echo "${BACKUP_DIR}" > "{{ ephemery_base_dir }}/backups/validator/keys/latest_backup"
      exit 0
    else
      echo "No existing keys to backup"
      exit 0
    fi
  args:
    executable: /bin/bash
  register: backup_result
  changed_when: backup_result.stdout is defined and "Created validator keys backup" in backup_result.stdout

- name: Report backup results
  ansible.builtin.debug:
    msg: "{{ backup_result.stdout_lines }}"
  when: backup_result.stdout_lines is defined and backup_result.stdout_lines | length > 0

- name: Copy validator keys archive
  ansible.builtin.copy:
    src: "{{ archive_src_file }}"
    dest: "{{ ephemery_base_dir }}/tmp/validator_keys.{{ archive_format }}"
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  register: archive_copied

- name: Display progress message
  ansible.builtin.debug:
    msg: "Beginning validator key extraction process..."

- name: Extract validator keys (zip format)
  ansible.builtin.unarchive:
    src: "{{ ephemery_base_dir }}/tmp/validator_keys.zip"
    dest: "{{ ephemery_base_dir }}/tmp/extraction"
    remote_src: yes
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  register: extracted_zip
  when: archive_format == "zip" and archive_copied is defined and archive_copied.changed
  failed_when: false

- name: Extract validator keys (tar.gz format)
  ansible.builtin.unarchive:
    src: "{{ ephemery_base_dir }}/tmp/validator_keys.tar.gz"
    dest: "{{ ephemery_base_dir }}/tmp/extraction"
    remote_src: yes
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  register: extracted_targz
  when: archive_format == "tar.gz" and archive_copied is defined and archive_copied.changed
  failed_when: false

- name: Set extraction result fact
  ansible.builtin.set_fact:
    extraction_success: >-
      {% if archive_format == "zip" and extracted_zip is defined %}
        {{ not extracted_zip.failed }}
      {% elif archive_format == "tar.gz" and extracted_targz is defined %}
        {{ not extracted_targz.failed }}
      {% else %}false{% endif %}

- name: Verify extraction success and count keys
  ansible.builtin.shell: |
    # Check if any files were extracted
    extracted_count=$(find {{ ephemery_base_dir }}/tmp/extraction -type f | wc -l)
    echo "Found ${extracted_count} files in extraction directory"

    # Look specifically for keystore files
    keystore_count=0
    keystore_files=$(find {{ ephemery_base_dir }}/tmp/extraction -name "keystore*.json" -type f)
    keystore_count=$(echo "$keystore_files" | grep -c "keystore" || echo "0")

    if [ $keystore_count -eq 0 ]; then
      # Try looking in validator_keys subdirectory if exists
      if [ -d "{{ ephemery_base_dir }}/tmp/extraction/validator_keys" ]; then
        keystore_files=$(find {{ ephemery_base_dir }}/tmp/extraction/validator_keys -name "keystore*.json" -type f)
        keystore_count=$(echo "$keystore_files" | grep -c "keystore" || echo "0")
        echo "Found ${keystore_count} keystore files in validator_keys subdirectory"
      fi
    else
      echo "Found ${keystore_count} keystore files directly in extraction directory"
    fi

    # Check expected key count (if specified)
    expected_count={{ validator_expected_key_count | default(0) }}
    if [ $expected_count -gt 0 ]; then
      echo "Expected key count: $expected_count"

      if [ $keystore_count -ne $expected_count ]; then
        echo "WARNING: Key count mismatch! Expected $expected_count but found $keystore_count"
      else
        echo "Key count matches expected value"
      fi
    fi

    # Report validation result
    if [ $keystore_count -eq 0 ]; then
      echo "ERROR: No validator keystore files found in extracted archive"
      exit 1
    else
      # Store the exact key count for later use
      echo $keystore_count > "{{ ephemery_base_dir }}/tmp/extracted_key_count"
      echo "Extraction validation successful"
      exit 0
    fi
  args:
    executable: /bin/bash
  register: validation_result
  failed_when: validation_result.rc != 0
  changed_when: false
  when: extraction_success|bool

- name: Set extracted key count fact
  ansible.builtin.shell: cat "{{ ephemery_base_dir }}/tmp/extracted_key_count"
  register: extracted_key_count_result
  changed_when: false
  when: extraction_success|bool and validation_result.rc == 0

- name: Set extracted key count fact
  ansible.builtin.set_fact:
    extracted_key_count: "{{ extracted_key_count_result.stdout | trim | int }}"
  when: extraction_success|bool and extracted_key_count_result is defined

- name: Failed extraction error report
  ansible.builtin.debug:
    msg: |
      Failed to extract validator keys archive.
      Archive format: {{ archive_format }}
      {% if archive_format == "zip" and extracted_zip is defined %}
      Error: {{ extracted_zip.msg | default('Unknown extraction error') }}
      {% elif archive_format == "tar.gz" and extracted_targz is defined %}
      Error: {{ extracted_targz.msg | default('Unknown extraction error') }}
      {% endif %}
  when: not extraction_success|bool

- name: Fail if extraction was unsuccessful
  ansible.builtin.fail:
    msg: "Validator key extraction failed. Please check the archive format and contents."
  when: not extraction_success|bool

- name: Set extracted keys directory fact
  ansible.builtin.set_fact:
    extracted_keys_dir: >-
      {% if validation_result.stdout is defined and "in validator_keys subdirectory" in validation_result.stdout %}
      {{ ephemery_base_dir }}/tmp/extraction/validator_keys
      {% else %}
      {{ ephemery_base_dir }}/tmp/extraction
      {% endif %}

- name: Report extraction results
  ansible.builtin.debug:
    msg: |
      Validator key extraction results:
      Successfully extracted {{ archive_format }} archive
      Extracted keys directory: {{ extracted_keys_dir }}
      {{ validation_result.stdout_lines | join('\n      ') }}
  when: extraction_success|bool and validation_result is defined

- name: Display key validation summary
  ansible.builtin.debug:
    msg: |
      +----------------------------------------------------+
      |             VALIDATOR KEY VALIDATION                |
      +----------------------------------------------------+
      | Archive Format:      {{ archive_format }}                          |
      | Extraction Status:   {{ "Success" if extraction_success else "Failed" }}                         |
      | Keys Found:          {{ extracted_key_count | default(0) }}                              |
      | Expected Keys:       {{ validator_expected_key_count | default("Not Specified") }}                      |
      | Backup Created:      {{ "Yes" if backup_result.stdout is defined and "Created validator keys backup" in backup_result.stdout else "No" }} |
      +----------------------------------------------------+
  when: extraction_success|bool
