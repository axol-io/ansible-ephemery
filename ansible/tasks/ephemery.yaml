---
- name: 🌟 Ensure ephemery directories exist

  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user | default("root") }}'
    group: '{{ ansible_user | default("root") }}'
  loop:
    - '{{ ephemery_base_dir }}'
    - '{{ ephemery_base_dir }}/data/el'
    - '{{ ephemery_base_dir }}/data/cl'
    - '{{ ephemery_base_dir }}/scripts'
    - '{{ ephemery_base_dir }}/logs'
    - '{{ ephemery_base_dir }}/config'
    - '{{ ephemery_base_dir }}/config/grafana'
    - '{{ ephemery_base_dir }}/config/grafana/agent'
    - '{{ ephemery_base_dir }}/config/grafana/provisioning'
    - '{{ ephemery_base_dir }}/config/grafana/provisioning/datasources'
    - '{{ ephemery_base_dir }}/config/grafana/provisioning/dashboards'

- name: 🔑 Include JWT secret management task
  ansible.builtin.import_tasks:
    file: jwt-secret.yaml
  tags: [jwt, security, always]

- name: 🌐 Setup Ephemery network configuration
  ansible.builtin.import_tasks:
    file: ephemery_config.yaml
  tags: [network, config, always]

- name: 🔑 Add user to Docker group
  ansible.builtin.user:
    name: '{{ ansible_user | default("root") }}'
    groups: docker
    append: true
  when: not test_mode | default(false) | bool

- name: 📝 Create health check script
  ansible.builtin.template:
    src: ../templates/scripts/health_check.sh.j2
    dest: '{{ ephemery_scripts_dir }}/health_check.sh'
    force: true
    owner: '{{ ansible_user | default("root") }}'
    group: '{{ ansible_user | default("root") }}'
    mode: '0755'

- name: ⏱️ Setup cron job for health check
  ansible.builtin.cron:
    name: Ephemery health check
    minute: '*/5'
    job: '{{ ephemery_scripts_dir }}/health_check.sh'
    user: '{{ ansible_user | default("root") }}'

  # Include client-specific configuration
- name: 🚀 Include client-specific configuration
  ansible.builtin.include_tasks:
    file: ../clients/{{ el }}-{{ cl }}/main.yaml
  when:
    - el in ['geth', 'besu', 'nethermind', 'reth', 'erigon']
    - cl in ['lighthouse', 'teku', 'prysm', 'lodestar']

  # Fallback to generic configuration if specific client combination is not available
- name: 🚀 Check if client-specific configuration exists
  ansible.builtin.stat:
    path: ../clients/{{ el }}-{{ cl }}/main.yaml
  register: client_config
  when:
    - el in ['geth', 'besu', 'nethermind', 'reth', 'erigon']
    - cl in ['lighthouse', 'teku', 'prysm', 'lodestar']

- name: 🚀 Check if Execution Client container exists
  community.docker.docker_container_info:
    name: '{{ network }}-{{ el }}'
  register: el_container_info
  ignore_errors: true
  when: not test_mode | default(false)

- name: 🚀 Remove existing Execution Client container if it exists
  community.docker.docker_container:
    name: '{{ network }}-{{ el }}'
    state: absent
    force_kill: true
  when: not test_mode | default(false) and el_container_info.exists | default(false)

- name: 🚀 Start Execution Client with generic configuration
  become: true
  community.docker.docker_container:
    name: '{{ network }}-{{ el }}'
    image: '{% if el == "geth" %}pk910/ephemery-geth:v1.15.3{% else %}{{ client_images[el] }}{% endif %}'
    state: started
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - '{{ ephemery_dir }}/data/{{ el }}:/data'
      - '{{ ephemery_dir }}/jwt.hex:/jwt.hex'
    command: >
      {% if el == "geth" %}
      --datadir=/data
      --authrpc.jwtsecret=/jwt.hex
      --http
      --http.api=eth,net,web3,engine
      --http.addr=0.0.0.0
      --http.corsdomain=*
      --http.vhosts=*
      --ws
      --ws.api=eth,net,web3,engine
      --ws.addr=0.0.0.0
      --ws.origins=*
      {{ el_extra_opts }}
      {% endif %}
  when: >
    (el == "geth" or el == "besu" or el == "nethermind" or el == "reth" or el == "erigon")
    and not test_mode | default(false)

- name: 🚀 Check if Consensus Client container exists
  community.docker.docker_container_info:
    name: '{{ network }}-{{ cl }}'
  register: cl_container_info
  ignore_errors: true
  when: not test_mode | default(false)

- name: 🚀 Remove existing Consensus Client container if it exists
  community.docker.docker_container:
    name: '{{ network }}-{{ cl }}'
    state: absent
    force_kill: true
  when: not test_mode | default(false) and cl_container_info.exists | default(false)

# Set up Lighthouse command based on sync strategy
- name: Set Lighthouse command for checkpoint sync
  ansible.builtin.set_fact:
    lighthouse_command: >
      lighthouse beacon_node
      --datadir=/data
      --execution-jwt=/jwt.hex
      --execution-endpoint=http://127.0.0.1:8551
      --http
      --http-address=0.0.0.0
      --http-port=5052
      --metrics
      --metrics-address=0.0.0.0
      --metrics-port=5054
      --checkpoint-sync-url={{ checkpoint_sync_url }}
      --testnet-dir=/ephemery_config
      {% if bootstrap_nodes is defined %}
      --boot-nodes={{ bootstrap_nodes | join(',') }}
      {% endif %}
      {{ cl_extra_opts }}
  when: cl == "lighthouse" and (use_checkpoint_sync | bool)

- name: Set Lighthouse command for genesis sync
  ansible.builtin.set_fact:
    lighthouse_command: >
      lighthouse beacon_node
      --datadir=/data
      --execution-jwt=/jwt.hex
      --execution-endpoint=http://127.0.0.1:8551
      --http
      --http-address=0.0.0.0
      --http-port=5052
      --metrics
      --metrics-address=0.0.0.0
      --metrics-port=5054
      --testnet-dir=/ephemery_config
      {{ cl_extra_opts }}
  when: cl == "lighthouse" and not (use_checkpoint_sync | bool)

- name: 🚀 Start Consensus Client with generic configuration
  become: true
  community.docker.docker_container:
    name: '{{ network }}-{{ cl }}'
    image: '{% if cl == "lighthouse" %}pk910/ephemery-lighthouse:latest{% else %}{{ client_images[cl] }}{% endif %}'
    state: started
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - '{{ ephemery_dir }}/data/{{ cl }}:/data'
      - '{{ ephemery_dir }}/jwt.hex:/jwt.hex'
      - '{{ ephemery_dir }}/config/ephemery_network:/ephemery_config:ro'
    command: >
      {% if cl == "lighthouse" %}
      {{ lighthouse_command }}
      {% endif %}
  when: (cl == "lighthouse" or cl == "teku" or cl == "prysm" or cl == "lodestar") and not test_mode | default(false)

- name: 📊 Start Grafana agent
  community.docker.docker_container:
    name: grafana-agent
    image: grafana/agent:v0.37.3
    state: started
    pull: true
    restart_policy: unless-stopped
    network_mode: host
    privileged: true
    volumes:
      - '{{ ephemery_dir }}/config/grafana/agent/grafana-agent.yaml:/etc/agent/grafana-agent.yaml:ro'
    command:
      - '--config.file=/etc/agent/grafana-agent.yaml'
      - '--server.http.address=0.0.0.0:{{ grafana_agent_http_port }}'
  when: not test_mode | default(false)
