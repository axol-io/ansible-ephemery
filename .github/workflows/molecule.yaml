---
name: Molecule Test
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint yamllint
          pip install ansible-core
      - name: Install Ansible collections
        run: |
          mkdir -p collections
          ansible-galaxy collection install -r requirements.yaml -p collections --force
          echo "ANSIBLE_COLLECTIONS_PATH=${{ github.workspace }}/collections" >> $GITHUB_ENV

          # Verify community.docker collection was installed correctly
          if ls -la "${{ github.workspace }}/collections/ansible_collections/community/docker/" 2>/dev/null; then
            echo "✅ community.docker installed successfully"
          else
            echo "❌ community.docker NOT installed - trying alternate method"
            ansible-galaxy collection install community.docker:4.4.0 -p ${{ github.workspace }}/collections
          fi

          # Verify collections were installed correctly
          chmod +x scripts/verify-collections.sh
          ./scripts/verify-collections.sh
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
      - name: Check YAML file extensions
        run: |
          chmod +x scripts/check-yaml-extensions.sh
          ./scripts/check-yaml-extensions.sh
      - name: Run ansible-lint
        run: |
          ansible-lint
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
      - name: Run yamllint
        run: |
          yamllint .
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections

  molecule:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - default
          - validator
          # Only keep geth-lighthouse active, all other client combinations are commented out
          # to reduce CI execution time. While all combinations are supported (see docs/CLIENT_COMBINATIONS.md),
          # we test only the default combination in CI to ensure basic functionality.
          # For comprehensive testing of all combinations, run the tests locally.
          - clients/geth-lighthouse
          # - clients/geth-prysm
          # - clients/geth-teku
          # - clients/geth-lodestar
          # - clients/reth-lighthouse
          # - clients/reth-prysm
          # - clients/reth-teku
          # - clients/reth-lodestar
          # - clients/reth-nimbus
          # - clients/erigon-lighthouse
          # - clients/erigon-prysm
          # - clients/erigon-teku
          # - clients/erigon-lodestar
          # - clients/nethermind-lighthouse
          # - clients/nethermind-prysm
          # - clients/nethermind-teku
          # - clients/nethermind-lodestar
          # - clients/besu-lighthouse
          # - clients/besu-prysm
          # - clients/besu-teku
          # - clients/besu-lodestar
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install molecule molecule-docker docker pytest-testinfra ansible-lint
          sudo apt-get update
          sudo apt-get install -y socat procps iproute2

          # Prevent Ansible from using system-wide collections
          echo "ANSIBLE_COLLECTIONS_PATH=${{ github.workspace }}/collections" >> $GITHUB_ENV
      - name: Install Ansible collections
        run: |
          mkdir -p collections
          # Uninstall any system-wide collections to avoid conflicts
          if [ -d "/opt/hostedtoolcache/Python/3.10.16/x64/lib/python3.10/site-packages/ansible_collections" ]; then
            echo "Removing system-wide ansible collections to avoid conflicts"
            sudo rm -rf /opt/hostedtoolcache/Python/3.10.16/x64/lib/python3.10/site-packages/ansible_collections
          fi

          ansible-galaxy collection install -r requirements.yaml -p collections --force
          echo "ANSIBLE_COLLECTIONS_PATH=${{ github.workspace }}/collections" >> $GITHUB_ENV

          # Set environment variable to explicitly ignore system collections
          echo "ANSIBLE_COLLECTIONS_SCAN_SYS_PATH=false" >> $GITHUB_ENV

          # Verify community.docker collection was installed correctly
          if ls -la "${{ github.workspace }}/collections/ansible_collections/community/docker/" 2>/dev/null; then
            echo "✅ community.docker installed successfully"
          else
            echo "❌ community.docker NOT installed - trying alternate method"
            ansible-galaxy collection install community.docker:4.4.0 -p ${{ github.workspace }}/collections
          fi

          # Verify collections were installed correctly
          chmod +x scripts/verify-collections.sh
          ./scripts/verify-collections.sh
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
      - name: Verify Docker
        run: |
          docker --version
          docker info
          ls -la /var/run/docker.sock
      - name: Create local ansible.cfg
        run: |
          cat > ansible.cfg << 'EOF'
          [defaults]
          collections_paths = ./collections
          retry_files_enabled = False
          host_key_checking = False
          transport = local
          force_color = True

          [ssh_connection]
          pipelining = True
          EOF
          echo "Created ansible.cfg in $(pwd)"
      - name: Fix trailing whitespace and line endings
        run: |
          # Install dos2unix if needed
          if ! command -v dos2unix &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y dos2unix
          fi

          # Fix all YAML files
          find . -name "*.yml" -o -name "*.yaml" | xargs -I{} dos2unix {}

          # Remove trailing whitespace
          find . -name "*.yml" -o -name "*.yaml" | xargs -I{} sed -i 's/[[:space:]]*$//' {}

          echo "Fixed line endings and trailing whitespace in YAML files"
      - name: Update Molecule configuration for GitHub Actions
        run: |
          for file in $(find molecule -name "molecule.yml"); do
            echo "Updating $file for GitHub Actions environment..."
            # Use default Docker socket path for GitHub Actions
            sed -i 's|/Users/.*/\.docker/run/docker\.sock|/var/run/docker.sock|g' $file
            sed -i 's|/Users/.*/\.orbstack/run/docker\.sock|/var/run/docker.sock|g' $file
            # Ensure proper cgroup mounting
            sed -i 's|/sys/fs/cgroup:/sys/fs/cgroup:ro|/sys/fs/cgroup:/sys/fs/cgroup:rw|g' $file
            # Add cgroupns_mode if not present
            if ! grep -q "cgroupns_mode:" $file; then
              sed -i '/privileged:/a\    cgroupns_mode: host' $file
            fi
          done
      - name: Run Molecule tests for ${{ matrix.scenario }} scenario
        run: |
          # Set environment variables for consistent collection loading
          export ANSIBLE_COLLECTIONS_PATH="${{ github.workspace }}/collections"
          export ANSIBLE_COLLECTIONS_SCAN_SYS_PATH=false
          export MOLECULE_EPHEMERAL_DIRECTORY="${{ github.workspace }}/molecule/${{ matrix.scenario }}/.molecule"

          # Set color and terminal settings
          export PYTHONIOENCODING=UTF-8
          export TERM=xterm-256color
          export PY_COLORS=1
          export ANSIBLE_FORCE_COLOR=1

          # Copy all collections to each scenario's directory for better isolation
          if [[ "${{ matrix.scenario }}" == *"/"* ]]; then
            # For nested scenarios like "clients/geth-lighthouse"
            SCENARIO_DIR="molecule/${{ matrix.scenario }}"
            SCENARIO_NAME=$(echo "${{ matrix.scenario }}" | cut -d'/' -f2)
            echo "Running nested scenario: ${{ matrix.scenario }}"

            # Create collections directory in the scenario folder
            mkdir -p "$SCENARIO_DIR/collections"
            cp -r "${{ github.workspace }}/collections/ansible_collections" "$SCENARIO_DIR/collections/"

            cd molecule
            # Use script to capture clean terminal output
            script -q -c "ANSIBLE_VERBOSITY=2 molecule test -s \"$SCENARIO_NAME\" --debug" /dev/null
          else
            # For standard scenarios
            SCENARIO_DIR="molecule/${{ matrix.scenario }}"
            echo "Running standard scenario: ${{ matrix.scenario }}"

            # Create collections directory in the scenario folder
            mkdir -p "$SCENARIO_DIR/collections"
            cp -r "${{ github.workspace }}/collections/ansible_collections" "$SCENARIO_DIR/collections/"

            # Use script to capture clean terminal output
            script -q -c "ANSIBLE_VERBOSITY=2 molecule test -s ${{ matrix.scenario }} --debug" /dev/null
          fi
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          DOCKER_HOST: unix:///var/run/docker.sock
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
          ANSIBLE_COLLECTIONS_SCAN_SYS_PATH: 'true'
          ANSIBLE_CONFIG: ${{ github.workspace }}/ansible.cfg
          ANSIBLE_ROLES_PATH: ${{ github.workspace }}/ansible
          PYTHONIOENCODING: 'UTF-8'
          TERM: 'xterm-256color'
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: molecule-${{ matrix.scenario }}-results
          path: |
            **/molecule/${{ matrix.scenario }}/*-result.xml
            **/molecule/${{ matrix.scenario }}/logs/
          retention-days: 7
