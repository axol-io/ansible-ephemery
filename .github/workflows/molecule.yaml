---
name: Molecule Test
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint yamllint
          pip install ansible-core
      - name: Install Ansible collections
        run: |
          mkdir -p collections
          ansible-galaxy collection install -r requirements.yaml -p collections --force
          echo "ANSIBLE_COLLECTIONS_PATH=${{ github.workspace }}/collections" >> $GITHUB_ENV

          # Verify community.docker collection was installed correctly
          if ls -la "${{ github.workspace }}/collections/ansible_collections/community/docker/" 2>/dev/null; then
            echo "✅ community.docker installed successfully"
          else
            echo "❌ community.docker NOT installed - trying alternate method"
            ansible-galaxy collection install community.docker:4.4.0 -p ${{ github.workspace }}/collections
          fi

          # Verify collections were installed correctly
          chmod +x scripts/verify-collections.sh
          ./scripts/verify-collections.sh
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
      - name: Check YAML file extensions
        run: |
          chmod +x scripts/check-yaml-extensions.sh
          ./scripts/check-yaml-extensions.sh
      - name: Run ansible-lint
        run: |
          ansible-lint
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
      - name: Run yamllint
        run: |
          yamllint .
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections

  test-wrapper-scripts:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-core
      - name: Install Ansible collections
        run: |
          mkdir -p collections
          ansible-galaxy collection install -r requirements.yaml -p collections --force
      - name: Create test environment
        run: |
          mkdir -p /tmp/ephemery-test/config
          mkdir -p /tmp/ephemery-test/scripts/validator
          mkdir -p /tmp/ephemery-test/scripts/core
          
          # Create mock validator scripts for testing
          cat > /tmp/ephemery-test/scripts/validator/manage_validator_keys.sh << 'EOF'
          #!/bin/bash
          echo "Mock manage_validator_keys.sh called with args: $@"
          exit 0
          EOF
          
          cat > /tmp/ephemery-test/scripts/validator/monitor_validator.sh << 'EOF'
          #!/bin/bash
          echo "Mock monitor_validator.sh called with args: $@"
          exit 0
          EOF
          
          cat > /tmp/ephemery-test/scripts/validator/test_validator_config.sh << 'EOF'
          #!/bin/bash
          echo "Mock test_validator_config.sh called with args: $@"
          exit 0
          EOF
          
          cat > /tmp/ephemery-test/scripts/core/ephemery_reset_handler.sh << 'EOF'
          #!/bin/bash
          echo "Mock ephemery_reset_handler.sh called with args: $@"
          exit 0
          EOF
          
          chmod +x /tmp/ephemery-test/scripts/validator/*.sh
          chmod +x /tmp/ephemery-test/scripts/core/*.sh
          
          # Create paths configuration
          cat > /tmp/ephemery-test/config/ephemery_paths.conf << 'EOF'
          EPHEMERY_BASE_DIR="/tmp/ephemery-test"
          EPHEMERY_SCRIPTS_DIR="${EPHEMERY_BASE_DIR}/scripts"
          EPHEMERY_DATA_DIR="${EPHEMERY_BASE_DIR}/data"
          EPHEMERY_LOGS_DIR="${EPHEMERY_BASE_DIR}/logs"
          EPHEMERY_CONFIG_DIR="${EPHEMERY_BASE_DIR}/config"
          EPHEMERY_VALIDATOR_SCRIPTS_DIR="${EPHEMERY_SCRIPTS_DIR}/validator"
          EPHEMERY_CORE_SCRIPTS_DIR="${EPHEMERY_SCRIPTS_DIR}/core"
          EOF
      - name: Test validator management wrapper script
        run: |
          # Copy the wrapper script to the test environment
          cp playbooks/deploy_validator_management.yaml /tmp/validator_management.yaml
          
          # Modify the playbook to use the test environment
          sed -i 's|ephemery_base_dir: "{{ ephemery_dir | default('\''/opt/ephemery'\'') }}"|ephemery_base_dir: "/tmp/ephemery-test"|g' /tmp/validator_management.yaml
          
          # Run the playbook to create the wrapper script
          ansible-playbook -i localhost, -c local /tmp/validator_management.yaml
          
          # Test the wrapper script
          echo "Testing validator management wrapper script..."
          /tmp/ephemery-test/scripts/manage-validator.sh keys list
          /tmp/ephemery-test/scripts/manage-validator.sh monitor
          /tmp/ephemery-test/scripts/manage-validator.sh test
          
          # Test help command
          /tmp/ephemery-test/scripts/manage-validator.sh help
          
          # Test invalid command
          if /tmp/ephemery-test/scripts/manage-validator.sh invalid 2>/dev/null; then
            echo "Error: Invalid command should have failed"
            exit 1
          else
            echo "Invalid command test passed"
          fi
      - name: Test retention wrapper script
        run: |
          # Copy the wrapper script to the test environment
          cp playbooks/deploy_ephemery_retention.yaml /tmp/ephemery_retention.yaml
          
          # Modify the playbook to use the test environment
          sed -i 's|ephemery_base_dir: "{{ ephemery_dir | default('\''/opt/ephemery'\'') }}"|ephemery_base_dir: "/tmp/ephemery-test"|g' /tmp/ephemery_retention.yaml
          
          # Create data directory for status test
          mkdir -p /tmp/ephemery-test/data
          touch /tmp/ephemery-test/data/reset_handled
          
          # Run the playbook to create the wrapper script
          ansible-playbook -i localhost, -c local /tmp/ephemery_retention.yaml
          
          # Test the wrapper script
          echo "Testing retention wrapper script..."
          /tmp/ephemery-test/scripts/manage-retention.sh check
          /tmp/ephemery-test/scripts/manage-retention.sh reset
          /tmp/ephemery-test/scripts/manage-retention.sh status
          
          # Test help command
          /tmp/ephemery-test/scripts/manage-retention.sh help
          
          # Test invalid command
          if /tmp/ephemery-test/scripts/manage-retention.sh invalid 2>/dev/null; then
            echo "Error: Invalid command should have failed"
            exit 1
          else
            echo "Invalid command test passed"
          fi

  molecule:
    runs-on: ubuntu-latest
    needs: [lint, test-wrapper-scripts]
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - default
          - validator
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible molecule molecule-plugins[docker] docker pytest pytest-testinfra
          pip install ansible-core
      - name: Install Ansible collections
        run: |
          mkdir -p collections
          ansible-galaxy collection install -r requirements.yaml -p collections --force
          echo "ANSIBLE_COLLECTIONS_PATH=${{ github.workspace }}/collections" >> $GITHUB_ENV
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
      - name: Run Molecule tests
        run: |
          cd molecule/${{ matrix.scenario }}
          molecule test
        env:
          ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/collections
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_DISTRO: ubuntu2204
