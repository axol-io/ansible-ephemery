---
name: Ephemery CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install shellharden
        run: cargo install shellharden

      - name: Lint shell scripts
        run: ./scripts/testing/lint_shell_scripts.sh --check

      - name: Lint Ansible files
        run: ansible-lint
        if: always()
        continue-on-error: true

      - name: Lint YAML files
        run: yamllint .
        if: always()
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install shellharden
        run: cargo install shellharden

      - name: Run tests in mock mode
        run: ./scripts/testing/ci_check.sh

      - name: Generate test report
        run: |
          mkdir -p test-results
          cp scripts/testing/reports/*.log test-results/ || true
        if: always()

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results
        if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ephemery:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver

      - name: Bump version
        id: bump_version
        run: |
          # Get current version from VERSION file or create it
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            CURRENT_VERSION="0.1.0"
          fi

          # Bump patch version
          NEW_VERSION=$(python -c "import semver; print(semver.VersionInfo.parse('${CURRENT_VERSION}').bump_patch())")

          # Save new version
          echo "${NEW_VERSION}" > VERSION

          echo "New version: ${NEW_VERSION}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.version }}
          name: Release v${{ steps.bump_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
