---
# Common verification tasks to be included in scenario verify.yml files
# Usage: - include_tasks: ../../shared/templates/verify/common.yaml

- name: Gather service facts
  service_facts:

- name: Check Docker service is running
  assert:
    that:
      - ansible_facts.services['docker.service'] is defined
      - ansible_facts.services['docker.service'].state == 'running'
    fail_msg: Docker service is not running
    success_msg: Docker service is running
  when: docker.service in ansible_facts.services

- name: Check that required Docker containers are running
  shell: docker ps --format '{% raw %}{{.Names}}{% endraw %}'
  register: docker_containers
  changed_when: false
  failed_when: false
  when: docker.service in ansible_facts.services

- name: Ensure Execution Client container is running
  assert:
    that:
      - (network | default('ephemery') ~ '_' ~ el | default('geth')) in docker_containers.stdout
    fail_msg: 'Execution client container ({{ network | default("ephemery") }}_{{ el | default("geth") }}) is not running'
    success_msg: 'Execution client container ({{ network | default("ephemery") }}_{{ el | default("geth") }}) is running'
  when: docker.service in ansible_facts.services and docker_containers.rc is defined and docker_containers.rc == 0 and not is_molecule_test | bool

- name: Ensure Consensus Client container is running
  assert:
    that:
      - (network | default('ephemery') ~ '_' ~ cl | default('lighthouse')) in docker_containers.stdout
    fail_msg: 'Consensus client container ({{ network | default("ephemery") }}_{{ cl | default("lighthouse") }}) is not running'
    success_msg: 'Consensus client container ({{ network | default("ephemery") }}_{{ cl | default("lighthouse") }}) is running'
  when: docker.service in ansible_facts.services and docker_containers.rc is defined and docker_containers.rc == 0 and not is_molecule_test | bool

# Skip directory checks in molecule tests
- name: Set molecule test flag
  set_fact:
    is_molecule_test: '{{ lookup("env", "MOLECULE_FILE") != "" }}'

- name: Check required directories exist
  stat:
    path: '{{ item }}'
  loop:
    - '{{ ephemery_base_dir | default(/home/ubuntu/ephemery) }}'
    - '{{ ephemery_data_dir | default("/home/ubuntu/ephemery/data") }}'
    - '{{ ephemery_logs_dir | default("/home/ubuntu/ephemery/logs") }}'
    - '{{ ephemery_scripts_dir | default("/home/ubuntu/ephemery/scripts") }}'
  register: dir_stats
  when: not is_molecule_test | bool

- name: Assert required directories exist
  assert:
    that: item.stat.exists and item.stat.isdir
    fail_msg: 'Required directory {{ item.item }} does not exist'
    success_msg: 'Required directory {{ item.item }} exists'
  loop: '{{ dir_stats.results }}'
  when: not is_molecule_test | bool

- name: Check JWT secret file exists
  stat:
    path: '{{ jwt_secret_path | default("/home/ubuntu/ephemery/data/jwt.hex") }}'
  register: jwt_secret_file
  when: not is_molecule_test | bool

- name: Assert JWT secret file exists
  assert:
    that: jwt_secret_file.stat.exists
    fail_msg: 'JWT secret file does not exist at {{ jwt_secret_path | default("/home/ubuntu/ephemery/data/jwt.hex") }}'
    success_msg: 'JWT secret file exists at {{ jwt_secret_path | default("/home/ubuntu/ephemery/data/jwt.hex") }}'
  when: not is_molecule_test | bool
