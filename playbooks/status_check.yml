---
# Status check playbook for Ephemery nodes
# This playbook checks the status of Ephemery nodes and generates a report

- name: Check status of Ephemery nodes
  hosts: ephemery
  gather_facts: true
  vars:
    report_dir: "{{ playbook_dir }}/../reports"
    check_disk_space: true
    check_memory: true
    check_client_versions: true
    check_services: true
    check_endpoints: true
    check_sync_status: true
    check_peers: true
    check_logs: true
    disk_warning_threshold: 20  # percentage
    memory_warning_threshold: 20  # percentage

  pre_tasks:
    - name: Set report timestamp
      set_fact:
        report_timestamp: "{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}"
      run_once: true

    - name: Share timestamp with all hosts
      set_fact:
        report_timestamp: "{{ hostvars[groups['ephemery'][0]]['report_timestamp'] }}"
      when: inventory_hostname != groups['ephemery'][0]

    - name: Set client names from inventory
      set_fact:
        el_client_name: "{{ el | default('geth') }}"
        cl_client_name: "{{ cl | default('lighthouse') }}"
        validator_client_name: "{{ cl | default('lighthouse') }}-validator"

    - name: Check if running on macOS
      debug:
        msg: |
          WARNING: This playbook is designed for Linux systems but is being run on macOS.
          Some functionality may be limited or not work as expected.
          For production use, please run this playbook on a Linux system.
      when: ansible_os_family == "Darwin"

    - name: Set OS-specific commands
      set_fact:
        load_avg_command: "{% if ansible_os_family == 'Darwin' %}sysctl -n vm.loadavg | awk '{print $2, $3, $4}'{% else %}cat /proc/loadavg{% endif %}"
        memory_check_command: "{% if ansible_os_family == 'Darwin' %}top -l 1 | grep 'PhysMem' | awk '{print $2 \" used, \" $6 \" total\"}'{% else %}free -m | grep -i mem{% endif %}"

  tasks:
    - name: Create report directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      with_items:
        - "{{ report_dir }}"
        - "{{ report_dir }}/{{ report_timestamp }}"

    - name: Ensure report subdirectories exist
      file:
        path: "{{ report_dir }}/{{ report_timestamp }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    # System status checks
    - name: Check system uptime
      command: uptime
      register: system_uptime
      changed_when: false
      become: true

    - name: Check system load
      shell: "{{ load_avg_command }}"
      register: system_load
      changed_when: false
      become: true

    - name: Check disk space
      shell: df -h / | grep -v Filesystem
      register: disk_space
      changed_when: false
      become: true
      when: check_disk_space | bool

    - name: Check memory usage
      shell: "{{ memory_check_command }}"
      register: memory_usage
      changed_when: false
      become: true
      when: check_memory | bool

    # Client version checks
    - name: Check execution client version
      shell: >
        {% if el == 'geth' %}geth version
        {% elif el == 'nethermind' %}nethermind --version
        {% elif el == 'besu' %}besu --version
        {% elif el == 'erigon' %}erigon --version
        {% elif el == 'reth' %}reth --version
        {% else %}echo "Unknown execution client"{% endif %}
      register: el_version
      changed_when: false
      failed_when: false
      become: true
      when:
        - check_client_versions | bool
        - el is defined

    - name: Check consensus client version
      shell: >
        {% if cl == 'lighthouse' %}lighthouse --version
        {% elif cl == 'prysm' %}beacon-chain --version
        {% elif cl == 'teku' %}teku --version
        {% elif cl == 'nimbus' %}nimbus_beacon_node --version
        {% elif cl == 'lodestar' %}lodestar --version
        {% else %}echo "Unknown consensus client"{% endif %}
      register: cl_version
      changed_when: false
      failed_when: false
      become: true
      when:
        - check_client_versions | bool
        - cl is defined

    # Service status checks
    - name: Check execution client service status
      service_facts:
      register: service_state
      become: true
      when: check_services | bool

    - name: Set execution client service status
      set_fact:
        el_service_status: "{{ service_state.ansible_facts.services[el + '.service'].state }}"
      when:
        - check_services | bool
        - el is defined
        - service_state.ansible_facts.services[el + '.service'] is defined

    - name: Set consensus client service status
      set_fact:
        cl_service_status: "{{ service_state.ansible_facts.services[cl + '.service'].state }}"
      when:
        - check_services | bool
        - cl is defined
        - service_state.ansible_facts.services[cl + '.service'] is defined

    - name: Set validator service status
      set_fact:
        validator_service_status: "{{ service_state.ansible_facts.services['validator.service'].state }}"
      when:
        - check_services | bool
        - validator_enabled | default(false) | bool
        - service_state.ansible_facts.services['validator.service'] is defined

    # Endpoint and sync status checks
    - name: Check execution client RPC endpoint
      uri:
        url: "http://localhost:{{ el_http_port | default(8545) }}"
        method: POST
        body_format: json
        body: '{"jsonrpc":"2.0","method":"net_version","params":[],"id":1}'
        status_code: 200
      register: el_endpoint
      changed_when: false
      failed_when: false
      become: true
      when:
        - check_endpoints | bool
        - el_http_enabled | default(true) | bool

    - name: Check execution client sync status
      uri:
        url: "http://localhost:{{ el_http_port | default(8545) }}"
        method: POST
        body_format: json
        body: '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}'
        status_code: 200
      register: el_sync
      changed_when: false
      failed_when: false
      become: true
      when:
        - check_sync_status | bool
        - el_http_enabled | default(true) | bool

    - name: Check execution client peers
      uri:
        url: "http://localhost:{{ el_http_port | default(8545) }}"
        method: POST
        body_format: json
        body: '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}'
        status_code: 200
      register: el_peers
      changed_when: false
      failed_when: false
      become: true
      when:
        - check_peers | bool
        - el_http_enabled | default(true) | bool

    # Check logs for errors
    - name: Check execution client logs for errors
      shell: "grep -i error {{ el_log_dir | default('/var/log/ethereum') }}/*.log | tail -n 10"
      register: el_log_errors
      changed_when: false
      failed_when: false
      become: true
      when: check_logs | bool

    - name: Check consensus client logs for errors
      shell: "grep -i error {{ cl_log_dir | default('/var/log/consensus') }}/*.log | tail -n 10"
      register: cl_log_errors
      changed_when: false
      failed_when: false
      become: true
      when: check_logs | bool

    # Generate status report
    - name: Generate status report
      template:
        src: ../templates/status_report.j2
        dest: "{{ report_dir }}/{{ report_timestamp }}/{{ inventory_hostname }}_status.yml"
      delegate_to: localhost

    - name: Generate HTML report
      template:
        src: ../templates/status_report_html.j2
        dest: "{{ report_dir }}/{{ report_timestamp }}/{{ inventory_hostname }}_status.html"
      delegate_to: localhost

    - name: Consolidate reports
      assemble:
        src: "{{ report_dir }}/{{ report_timestamp }}/"
        dest: "{{ report_dir }}/{{ report_timestamp }}/ephemery_status_report.html"
        regexp: ".*_status.html$"
      delegate_to: localhost
      run_once: true

    - name: Display report location
      debug:
        msg: "Status check completed. Report available at {{ report_dir }}/{{ report_timestamp }}/ephemery_status_report.html"
      delegate_to: localhost
      run_once: true
