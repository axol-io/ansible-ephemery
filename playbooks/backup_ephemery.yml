---
# Backup playbook for Ephemery nodes
# This playbook creates backups of critical Ephemery node data

- name: Backup Ephemery nodes
  hosts: ephemery_nodes
  gather_facts: true
  vars:
    backup_timestamp: "{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}"
    backup_dir: "/opt/ephemery/backups"
    local_backup_dir: "./backups"
    backup_files:
      - path: "/opt/ephemery/jwt"
        required: true
        type: "jwt"
      - path: "/opt/ephemery/config"
        required: true
        type: "config"
      - path: "/opt/ephemery/execution/nethermind/keystore"
        required: false
        type: "execution"
      - path: "/opt/ephemery/execution/geth/keystore"
        required: false
        type: "execution"
      - path: "/opt/ephemery/execution/besu/keystore"
        required: false
        type: "execution"
      - path: "/opt/ephemery/consensus/validator_keys"
        required: false
        type: "consensus"
      - path: "/opt/ephemery/validator/keys"
        required: false
        type: "validator"
      - path: "/opt/ephemery/validator/secrets"
        required: false
        type: "validator"

  tasks:
    - name: Create local backup directory
      file:
        path: "{{ local_backup_dir }}"
        state: directory
        mode: '0700'
      delegate_to: localhost
      run_once: true

    - name: Create node-specific backup directory
      file:
        path: "{{ backup_dir }}/{{ backup_timestamp }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0700'
      become: true

    # Execution client-specific backup tasks
    - name: Stop execution client service before backup (if requested)
      service:
        name: "{{ el_client_name }}"
        state: stopped
      become: true
      when: 
        - stop_services | default(false) | bool
        - el_client_name is defined
      register: execution_stopped

    # Consensus client-specific backup tasks
    - name: Stop consensus client service before backup (if requested)
      service:
        name: "{{ cl_client_name }}"
        state: stopped
      become: true
      when: 
        - stop_services | default(false) | bool
        - cl_client_name is defined
      register: consensus_stopped

    # Validator client-specific backup tasks
    - name: Stop validator client service before backup (if requested)
      service:
        name: "{{ validator_client_name }}"
        state: stopped
      become: true
      when: 
        - stop_services | default(false) | bool
        - validator_client_name is defined
      register: validator_stopped

    - name: Create backup archives
      archive:
        path: "{{ item.path }}"
        dest: "{{ backup_dir }}/{{ backup_timestamp }}/{{ item.type }}_backup.tar.gz"
        format: gz
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      ignore_errors: "{{ not item.required }}"
      with_items: "{{ backup_files }}"
      become: true

    - name: Start execution client service after backup
      service:
        name: "{{ el_client_name }}"
        state: started
      become: true
      when: execution_stopped is defined and execution_stopped.changed

    - name: Start consensus client service after backup
      service:
        name: "{{ cl_client_name }}"
        state: started
      become: true
      when: consensus_stopped is defined and consensus_stopped.changed

    - name: Start validator client service after backup
      service:
        name: "{{ validator_client_name }}"
        state: started
      become: true
      when: validator_stopped is defined and validator_stopped.changed

    - name: Create node inventory file
      template:
        src: ../templates/node_inventory.j2
        dest: "{{ backup_dir }}/{{ backup_timestamp }}/node_inventory.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      become: true

    - name: Fetch backups to control node
      fetch:
        src: "{{ backup_dir }}/{{ backup_timestamp }}/{{ item.type }}_backup.tar.gz"
        dest: "{{ local_backup_dir }}/{{ inventory_hostname }}_{{ backup_timestamp }}/"
        flat: yes
      ignore_errors: "{{ not item.required }}"
      with_items: "{{ backup_files }}"
      become: true

    - name: Fetch node inventory to control node
      fetch:
        src: "{{ backup_dir }}/{{ backup_timestamp }}/node_inventory.yml"
        dest: "{{ local_backup_dir }}/{{ inventory_hostname }}_{{ backup_timestamp }}/"
        flat: yes
      become: true

    - name: Cleanup remote backup files (if requested)
      file:
        path: "{{ backup_dir }}/{{ backup_timestamp }}"
        state: absent
      become: true
      when: cleanup_remote | default(true) | bool

    - name: Display backup location
      debug:
        msg: "Backup completed for {{ inventory_hostname }}. Files stored in {{ local_backup_dir }}/{{ inventory_hostname }}_{{ backup_timestamp }}/" 