---
# Ephemery Retention System Playbook
# This playbook deploys the Ephemery retention script and cron job to automatically handle weekly resets

- name: Deploy Ephemery Retention System
  hosts: all
  become: true
  vars:
    ephemery_base_dir: "{{ ephemery_dir | default('/opt/ephemery') }}"
    ephemery_config_dir: "{{ ephemery_base_dir }}/config"
    ephemery_scripts_dir: "{{ ephemery_base_dir }}/scripts"
    ephemery_data_dir: "{{ ephemery_base_dir }}/data"
    ephemery_logs_dir: "{{ ephemery_base_dir }}/logs"
    ephemery_core_scripts_dir: "{{ ephemery_scripts_dir }}/core"
    # JWT authentication settings
    jwt_secret_path: "{{ ephemery_base_dir }}/jwt.hex"
    jwt_permissions: "0600"

  tasks:
    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ ephemery_config_dir }}"
        - "{{ ephemery_scripts_dir }}"
        - "{{ ephemery_data_dir }}"
        - "{{ ephemery_logs_dir }}"
        - "{{ ephemery_core_scripts_dir }}"

    # JWT Authentication Setup - Added as part of improved JWT authentication handling
    - name: Check if JWT secret file exists
      ansible.builtin.stat:
        path: "{{ jwt_secret_path }}"
      register: jwt_secret_file

    - name: Generate a new JWT secret if it doesn't exist
      ansible.builtin.shell: openssl rand -hex 32 | tr -d "\n" | sed 's/^/0x/' > "{{ jwt_secret_path }}"
      args:
        creates: "{{ jwt_secret_path }}"
      when: not jwt_secret_file.stat.exists

    - name: Ensure JWT secret file has correct permissions
      ansible.builtin.file:
        path: "{{ jwt_secret_path }}"
        mode: "{{ jwt_permissions }}"
      when: jwt_secret_file.stat.exists

    - name: Validate JWT secret format
      ansible.builtin.shell: |
        JWT_CONTENT=$(cat "{{ jwt_secret_path }}")
        if [[ ! "${JWT_CONTENT}" =~ ^0x[0-9a-fA-F]{64}$ ]]; then
          echo "0x$(openssl rand -hex 32)" > "{{ jwt_secret_path }}"
          echo "regenerated"
        else
          echo "valid"
        fi
      register: jwt_validation
      changed_when: jwt_validation.stdout == "regenerated"

    - name: Display JWT token validation result
      ansible.builtin.debug:
        msg: "JWT token status: {{ jwt_validation.stdout }}"

    # Check if standardized paths configuration exists
    - name: Check if standardized paths configuration exists
      ansible.builtin.stat:
        path: "{{ ephemery_config_dir }}/ephemery_paths.conf"
      register: paths_conf

    - name: Create configuration file
      ansible.builtin.copy:
        content: |
          # Ephemery Paths Configuration
          # This file defines standard paths used across all Ephemery scripts and services

          # Base directory for Ephemery installation
          EPHEMERY_BASE_DIR="{{ ephemery_base_dir }}"

          # Directory for Ephemery scripts
          EPHEMERY_SCRIPTS_DIR="${EPHEMERY_BASE_DIR}/scripts"

          # Directory for Ephemery data
          EPHEMERY_DATA_DIR="${EPHEMERY_BASE_DIR}/data"

          # Directory for Ephemery logs
          EPHEMERY_LOGS_DIR="${EPHEMERY_BASE_DIR}/logs"

          # Directory for Ephemery configuration
          EPHEMERY_CONFIG_DIR="${EPHEMERY_BASE_DIR}/config"

          # Core scripts directory
          EPHEMERY_CORE_SCRIPTS_DIR="${EPHEMERY_SCRIPTS_DIR}/core"

          # JWT secret path - standardized to use jwt.hex filename
          EPHEMERY_JWT_SECRET="${EPHEMERY_BASE_DIR}/jwt.hex"

          # Validator keys directory
          EPHEMERY_VALIDATOR_KEYS="${EPHEMERY_DATA_DIR}/validator_keys"

          # Metrics directory
          EPHEMERY_METRICS_DIR="${EPHEMERY_DATA_DIR}/metrics"

          # Default endpoints
          LIGHTHOUSE_API_ENDPOINT="http://localhost:5052"
          GETH_API_ENDPOINT="http://localhost:8545"
          VALIDATOR_API_ENDPOINT="http://localhost:5062"
        dest: "{{ ephemery_config_dir }}/ephemery_paths.conf"
        mode: '0644'
      when: not paths_conf.stat.exists

    # Copy JWT authentication test script - Added for improved monitoring
    - name: Copy JWT authentication test script
      ansible.builtin.copy:
        src: "../scripts/testing/tests/test_jwt_auth.sh"
        dest: "{{ ephemery_scripts_dir }}/test_jwt_auth.sh"
        mode: '0755'
      register: jwt_test_script

    # Configure the JWT test to run periodically
    - name: Create cron job for JWT authentication monitoring
      ansible.builtin.cron:
        name: "Monitor JWT authentication"
        minute: "*/30"
        job: "{{ ephemery_scripts_dir }}/test_jwt_auth.sh >> {{ ephemery_logs_dir }}/jwt_auth_test.log 2>&1"
        state: present
        user: "root"

    - name: Copy ephemery reset handler script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # ephemery_reset_handler.sh - Handles Ephemery network resets
          #
          # This script detects when the Ephemery network has reset and performs
          # necessary actions to prepare the node for the new network, including
          # restoring validator keys.

          # Strict error handling
          set -euo pipefail

          # Load configuration if available
          CONFIG_FILE="{{ ephemery_config_dir }}/ephemery_paths.conf"
          if [ -f "$CONFIG_FILE" ]; then
            source "$CONFIG_FILE"
          else
            echo "Configuration file not found, using default paths"
            # Default paths if config not available
            EPHEMERY_BASE_DIR="{{ ephemery_base_dir }}"
            EPHEMERY_DATA_DIR="${EPHEMERY_BASE_DIR}/data"
            EPHEMERY_LOGS_DIR="${EPHEMERY_BASE_DIR}/logs"
            EPHEMERY_CONFIG_DIR="${EPHEMERY_BASE_DIR}/config"
          fi

          # Default paths
          DATA_DIR="${EPHEMERY_DATA_DIR}"
          CONFIG_DIR="${EPHEMERY_CONFIG_DIR}"
          LAST_GENESIS_TIME_FILE="${DATA_DIR}/last_genesis_time"
          RESET_DETECTED_FILE="${DATA_DIR}/reset_detected"
          RESET_HANDLED_FILE="${DATA_DIR}/reset_handled"
          LOG_FILE="${EPHEMERY_LOGS_DIR}/reset_handler.log"
          
          # JWT Auth path - use consistent path
          JWT_SECRET="${EPHEMERY_JWT_SECRET:-${EPHEMERY_BASE_DIR}/jwt.hex}"

          # Default settings
          VERBOSE=false
          FORCE=false
          DRY_RUN=false
          RESTORE_KEYS=true
          RESTART_CONTAINERS=true
          BEACON_CONTAINER="ephemery-beacon-lighthouse"
          VALIDATOR_CONTAINER="ephemery-validator-lighthouse"
          EXECUTION_CONTAINER="ephemery-geth"

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color

          # Create data directory if it doesn't exist
          mkdir -p "${DATA_DIR}" "${EPHEMERY_LOGS_DIR}"

          # Logging function
          log() {
              local timestamp
              timestamp=$(date +"%Y-%m-%d %H:%M:%S")
              echo -e "${timestamp} - $1" | tee -a "${LOG_FILE}"
          }

          # Print usage information
          show_usage() {
              echo "Usage: $0 [options]"
              echo ""
              echo "Options:"
              echo "  --verbose       Show detailed output"
              echo "  --force         Force reset handling even if not detected"
              echo "  --dry-run       Show what would be done without making changes"
              echo "  --no-keys       Skip key restoration"
              echo "  --no-restart    Skip container restart"
              echo "  --help          Show this help message"
              echo ""
          }

          # Reset JWT secret function - ensures proper setup during network reset
          reset_jwt_secret() {
              log "${BLUE}Resetting JWT secret for new network...${NC}"
              
              # Generate new JWT secret
              echo "0x$(openssl rand -hex 32)" > "${JWT_SECRET}"
              chmod 600 "${JWT_SECRET}"
              
              # Verify the secret
              JWT_CONTENT=$(cat "${JWT_SECRET}")
              log "${GREEN}âœ“ New JWT secret generated (first 10 chars): ${JWT_CONTENT:0:10}...${NC}"
              
              # Return success
              return 0
          }

          # Main function to check for network reset
          check_for_reset() {
              log "Checking for Ephemery network reset..."

              # For demo purposes, we'll just check if the reset_detected file exists
              if [[ -f "${RESET_DETECTED_FILE}" ]]; then
                  log "Reset detected!"
                  return 0
              elif [[ "${FORCE}" == "true" ]]; then
                  log "Force flag set, treating as if reset was detected"
                  return 0
              else
                  log "No reset detected"
                  return 1
              fi
          }

          # Function to handle the reset
          handle_reset() {
              log "Handling Ephemery network reset..."

              if [[ "${DRY_RUN}" == "true" ]]; then
                  log "DRY RUN: Would handle network reset here"
              else
                  # Step 1: Stop containers if requested
                  if [[ "${RESTART_CONTAINERS}" == "true" ]]; then
                      log "Stopping Ephemery containers..."
                      docker stop "${BEACON_CONTAINER}" "${VALIDATOR_CONTAINER}" 2>/dev/null || log "Warning: Failed to stop containers (may not be running)"
                  fi

                  # Step 2: Restore validator keys if requested
                  if [[ "${RESTORE_KEYS}" == "true" ]]; then
                      log "Restoring validator keys..."
                      # Use the validator management wrapper script
                      if command -v ephemery-validator &> /dev/null; then
                          ephemery-validator keys restore --latest || {
                              log "Error: Validator key restore failed"
                              return 1
                          }
                      else
                          log "Error: ephemery-validator command not found"
                          return 1
                      fi
                  fi

                  # Step 3: Restart containers if requested
                  if [[ "${RESTART_CONTAINERS}" == "true" ]]; then
                      log "Starting Ephemery containers..."
                      docker start "${BEACON_CONTAINER}" "${VALIDATOR_CONTAINER}" 2>/dev/null || {
                          log "Error: Failed to start containers"
                          return 1
                      }
                  fi

                  # Mark reset as handled
                  touch "${RESET_HANDLED_FILE}"
                  log "Network reset handling complete"
              fi
          }

          # Main execution
          log "Ephemery reset handler started"

          # Check if a reset was already detected but not handled
          if check_for_reset; then
              handle_reset
          else
              log "No action needed"
          fi

          log "Ephemery reset handler finished"
          exit 0
        dest: "{{ ephemery_core_scripts_dir }}/ephemery_reset_handler.sh"
        mode: '0755'

    - name: Copy retention script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          #
          # Ephemery Retention Script
          # =========================
          #
          # This script checks for Ephemery network resets and handles them automatically
          #

          # Load configuration
          CONFIG_FILE="{{ ephemery_config_dir }}/ephemery_paths.conf"
          if [ -f "$CONFIG_FILE" ]; then
            source "$CONFIG_FILE"
          else
            echo "Configuration file not found, using default paths"
            EPHEMERY_BASE_DIR="{{ ephemery_base_dir }}"
            EPHEMERY_LOGS_DIR="${EPHEMERY_BASE_DIR}/logs"
            EPHEMERY_DATA_DIR="${EPHEMERY_BASE_DIR}/data"
            EPHEMERY_CORE_SCRIPTS_DIR="${EPHEMERY_BASE_DIR}/scripts/core"
          fi

          LOG_FILE="${EPHEMERY_LOGS_DIR}/retention.log"

          # Create log directory if it doesn't exist
          mkdir -p "$(dirname "$LOG_FILE")"

          echo "$(date): Checking for Ephemery network reset..." >> "$LOG_FILE"

          # Check if reset handler script exists
          RESET_HANDLER="${EPHEMERY_CORE_SCRIPTS_DIR}/ephemery_reset_handler.sh"
          if [ -f "$RESET_HANDLER" ]; then
            echo "$(date): Running reset handler script..." >> "$LOG_FILE"
            bash "$RESET_HANDLER" >> "$LOG_FILE" 2>&1
          else
            echo "$(date): Reset handler script not found at $RESET_HANDLER" >> "$LOG_FILE"
          fi

          echo "$(date): Retention check completed" >> "$LOG_FILE"
        dest: "{{ ephemery_scripts_dir }}/ephemery_retention.sh"
        mode: '0755'

    - name: Create wrapper script for ephemery retention
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          #
          # Ephemery Retention Wrapper Script
          # This script provides a simple interface to the ephemery retention functionality
          #

          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          CORE_SCRIPTS_DIR="${SCRIPT_DIR}/core"

          # Source the standardized paths configuration if available
          if [[ -f "{{ ephemery_config_dir }}/ephemery_paths.conf" ]]; then
            source "{{ ephemery_config_dir }}/ephemery_paths.conf"
            CORE_SCRIPTS_DIR="${EPHEMERY_CORE_SCRIPTS_DIR:-${CORE_SCRIPTS_DIR}}"
          fi

          function show_help {
            echo "Ephemery Retention Management"
            echo ""
            echo "Usage: $0 [command] [options]"
            echo ""
            echo "Commands:"
            echo "  check     Check for network resets"
            echo "  reset     Force a reset handling"
            echo "  status    Show retention status"
            echo "  help      Show this help message"
            echo ""
            echo "For command-specific help, run: $0 [command] --help"
          }

          if [[ $# -lt 1 ]]; then
            show_help
            exit 1
          fi

          COMMAND="$1"
          shift

          case "${COMMAND}" in
            check)
              "${SCRIPT_DIR}/ephemery_retention.sh"
              ;;
            reset)
              "${CORE_SCRIPTS_DIR}/ephemery_reset_handler.sh" --force "$@"
              ;;
            status)
              echo "Checking retention status..."
              if [[ -f "${EPHEMERY_DATA_DIR}/reset_detected" ]]; then
                echo "Reset detected but not yet handled"
              elif [[ -f "${EPHEMERY_DATA_DIR}/reset_handled" ]]; then
                echo "Reset was detected and handled successfully"
                echo "Last handled: $(stat -c %y "${EPHEMERY_DATA_DIR}/reset_handled")"
              else
                echo "No reset has been detected"
              fi
              ;;
            help)
              show_help
              ;;
            *)
              echo "Error: Unknown command '${COMMAND}'"
              show_help
              exit 1
              ;;
          esac
        dest: "{{ ephemery_scripts_dir }}/manage-retention.sh"
        mode: '0755'

    - name: Set up cron job for retention
      ansible.builtin.cron:
        name: "Ephemery retention check"
        job: "{{ ephemery_scripts_dir }}/ephemery_retention.sh"
        minute: "*/5"
        state: present

    - name: Create symbolic link to wrapper script in /usr/local/bin
      ansible.builtin.file:
        src: "{{ ephemery_scripts_dir }}/manage-retention.sh"
        dest: /usr/local/bin/ephemery-retention
        state: link
        force: yes

    - name: Run retention script for the first time
      ansible.builtin.command: "{{ ephemery_scripts_dir }}/ephemery_retention.sh"
      changed_when: false

    - name: Display usage information
      ansible.builtin.debug:
        msg:
          - "Ephemery retention system has been deployed."
          - "You can now use the wrapper script to manage retention:"
          - "  ephemery-retention check"
          - "  ephemery-retention reset"
          - "  ephemery-retention status"
