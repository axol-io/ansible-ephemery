---
# Custom validator setup for mounting existing validator keys

- name: Create validator directories
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  loop:
    - '{{ ephemery_base_dir }}/data/validator'
    - '{{ ephemery_base_dir }}/secrets/validator'
    - '{{ ephemery_base_dir }}/secrets/validator/keys'
    - '{{ ephemery_base_dir }}/secrets/validator/passwords'
    - '{{ ephemery_base_dir }}/tmp'  # Temporary directory for safe extraction

- name: Stop existing validator container to prevent slashing
  community.docker.docker_container:
    name: '{{ network }}-validator-{{ cl }}'
    state: stopped
  ignore_errors: yes  # Continue even if container doesn't exist

# Check for compressed archives
- name: Check if zip file exists
  ansible.builtin.stat:
    path: files/validator_keys/validator_keys.zip
  delegate_to: localhost
  register: zip_stat

- name: Check if tar.gz file exists
  ansible.builtin.stat:
    path: files/validator_keys/validator_keys.tar.gz
  delegate_to: localhost
  register: targz_stat

# Process zip file if it exists
- block:
    - name: Copy validator keys zip file to the node
      ansible.builtin.copy:
        src: 'files/validator_keys/validator_keys.zip'
        dest: '{{ ephemery_base_dir }}/validator_keys.zip'
        mode: '0644'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      register: zip_copied

    - name: Clear temporary extraction directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/tmp/validator_keys'
        state: absent
      when: zip_copied.changed

    - name: Create temporary extraction directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/tmp/validator_keys'
        state: directory
        mode: '0755'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      when: zip_copied.changed

    - name: Extract validator keys to temporary location first (zip)
      ansible.builtin.unarchive:
        src: '{{ ephemery_base_dir }}/validator_keys.zip'
        dest: '{{ ephemery_base_dir }}/tmp/validator_keys/'
        remote_src: yes
        mode: '0600'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      when: zip_copied.changed
      register: temp_extraction

    - name: Clear existing keys directory to prevent duplicates
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: absent
      when: zip_copied.changed and temp_extraction.changed

    - name: Recreate keys directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: directory
        mode: '0755'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      when: zip_copied.changed and temp_extraction.changed

    - name: Move extracted keys from temporary location to final destination
      ansible.builtin.shell: mv {{ ephemery_base_dir }}/tmp/validator_keys/* {{ ephemery_base_dir }}/secrets/validator/keys/
      args:
        warn: false
      when: zip_copied.changed and temp_extraction.changed
      register: keystores_copied

    - name: Set proper permissions on moved files
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: directory
        mode: '0600'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        recurse: yes
      when: zip_copied.changed and temp_extraction.changed

    - name: Remove the zip file after extraction
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/validator_keys.zip'
        state: absent
      when: zip_copied.changed

    - name: Remove temporary directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/tmp/validator_keys'
        state: absent
      when: zip_copied.changed
  when: zip_stat.stat.exists

# Process tar.gz file if it exists and zip doesn't exist
- block:
    - name: Copy validator keys tar.gz file to the node
      ansible.builtin.copy:
        src: 'files/validator_keys/validator_keys.tar.gz'
        dest: '{{ ephemery_base_dir }}/validator_keys.tar.gz'
        mode: '0644'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      register: targz_copied

    - name: Clear temporary extraction directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/tmp/validator_keys'
        state: absent
      when: targz_copied.changed

    - name: Create temporary extraction directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/tmp/validator_keys'
        state: directory
        mode: '0755'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      when: targz_copied.changed

    - name: Extract validator keys to temporary location first (tar.gz)
      ansible.builtin.unarchive:
        src: '{{ ephemery_base_dir }}/validator_keys.tar.gz'
        dest: '{{ ephemery_base_dir }}/tmp/validator_keys/'
        remote_src: yes
        mode: '0600'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      when: targz_copied.changed
      register: temp_extraction

    - name: Clear existing keys directory to prevent duplicates
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: absent
      when: targz_copied.changed and temp_extraction.changed

    - name: Recreate keys directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: directory
        mode: '0755'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      when: targz_copied.changed and temp_extraction.changed

    - name: Move extracted keys from temporary location to final destination
      ansible.builtin.shell: mv {{ ephemery_base_dir }}/tmp/validator_keys/* {{ ephemery_base_dir }}/secrets/validator/keys/
      args:
        warn: false
      when: targz_copied.changed and temp_extraction.changed
      register: keystores_copied

    - name: Set proper permissions on moved files
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: directory
        mode: '0600'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        recurse: yes
      when: targz_copied.changed and temp_extraction.changed

    - name: Remove the tar.gz file after extraction
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/validator_keys.tar.gz'
        state: absent
      when: targz_copied.changed

    - name: Remove temporary directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/tmp/validator_keys'
        state: absent
      when: targz_copied.changed
  when: not zip_stat.stat.exists and targz_stat.stat.exists

# Fallback to individual file copy if neither zip nor tar.gz exists
- block:
    - name: Stop existing validator container to prevent slashing
      community.docker.docker_container:
        name: '{{ network }}-validator-{{ cl }}'
        state: stopped
      ignore_errors: yes  # Continue even if container doesn't exist

    - name: Clear existing keys directory to prevent duplicates
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: absent

    - name: Recreate keys directory
      ansible.builtin.file:
        path: '{{ ephemery_base_dir }}/secrets/validator/keys'
        state: directory
        mode: '0755'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'

    - name: Copy validator keystores to the node (fallback to individual file copy)
      ansible.builtin.copy:
        src: '{{ validator_keys_src }}/'
        dest: '{{ ephemery_base_dir }}/secrets/validator/keys/'
        mode: '0600'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
      register: keystores_copied
  when: not zip_stat.stat.exists and not targz_stat.stat.exists

- name: Copy password file
  ansible.builtin.copy:
    src: '{{ validator_keys_password_file }}'
    dest: '{{ ephemery_base_dir }}/secrets/validator/passwords/validators.txt'
    mode: '0600'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
  register: password_copied

- name: Set beacon API endpoint
  ansible.builtin.set_fact:
    beacon_api_endpoint: >-
      {% if cl == 'lighthouse' or cl == 'teku' or cl == 'lodestar' %}http://127.0.0.1:5052
      {% elif cl == 'prysm' %}http://127.0.0.1:4000
      {% else %}http://127.0.0.1:5052{% endif %}

- name: Set fee recipient address
  ansible.builtin.set_fact:
    fee_recipient: '{{ validator_fee_recipient | default("0x0000000000000000000000000000000000000000") }}'

- name: Set validator graffiti
  ansible.builtin.set_fact:
    validator_graffiti_value: '{{ validator_graffiti | default(inventory_hostname) }}'

- name: Start validator client container with mounted keys
  community.docker.docker_container:
    name: '{{ network }}-validator-{{ cl }}'
    image: '{{ client_images.validator | default("sigp/lighthouse:latest") }}'
    state: started
    restart_policy: unless-stopped
    network_mode: host
    memory: '{{ validator_memory_limit | default("2g") }}'
    volumes:
      - '{{ ephemery_base_dir }}/data/validator:/data'
      - '{{ ephemery_base_dir }}/secrets/validator/keys:/secrets/validator_keys:ro'
      - '{{ ephemery_base_dir }}/secrets/validator/passwords:/secrets/validator_passwords:ro'
    command: >
      validator
      --network ephemery
      --datadir /data
      --beacon-node {{ beacon_api_endpoint }}
      --suggested-fee-recipient {{ fee_recipient }}
      --graffiti {{ validator_graffiti_value }}
      --validators-dir /secrets/validator_keys
      --passwords-dir /secrets/validator_passwords
  when: keystores_copied.changed or keystores_copied.skipped or password_copied.changed or password_copied.skipped
