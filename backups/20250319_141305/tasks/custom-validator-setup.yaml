---
  # Custom validator setup for mounting existing validator keys

- name: Set default variables if not defined
  ansible.builtin.set_fact:
    validator_keys_password_file: "{{ playbook_dir }}/../files/passwords/validators.txt"
    expected_key_count: "{{ validator_expected_key_count | default(0) }}"
  when: validator_keys_password_file is not defined

- name: Create validator directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  loop:
    - "{{ ephemery_base_dir }}/data/validator"
    - "{{ ephemery_base_dir }}/secrets/validator"
    - "{{ ephemery_base_dir }}/secrets/validator/keys"
    - "{{ ephemery_base_dir }}/secrets/validator/passwords"
    - "{{ ephemery_base_dir }}/tmp" # Temporary directory for safe extraction
    - "{{ ephemery_base_dir }}/backups/validator/keys" # New backup directory
    - "{{ ephemery_base_dir }}/config"
    - "{{ ephemery_base_dir }}/config/ephemery_network"

- name: Extract Ephemery network configuration
  ansible.builtin.shell: |
    mkdir -p {{ ephemery_base_dir }}/config/ephemery_network
    cd {{ ephemery_base_dir }}/config/ephemery_network
    if [ ! -f "genesis.ssz" ]; then
      wget -q https://ephemery.pk910.de/testnet-all.tar.gz -O testnet-all.tar.gz
      tar -xzf testnet-all.tar.gz
    fi
  args:
    creates: "{{ ephemery_base_dir }}/config/ephemery_network/genesis.ssz"

- name: Stop existing validator container to prevent slashing
  community.docker.docker_container:
    name: "{{ network }}-validator-{{ cl }}"
    state: stopped
    image: "{{ client_images.validator }}"
  failed_when: false

- name: Debug validator keys path
  ansible.builtin.debug:
    msg: "Validator keys path: {{ validator_keys_password_file }}, playbook dir: {{ playbook_dir }}"

- name: Check if passwords directory exists locally
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/../files/passwords"
  register: passwords_dir
  delegate_to: localhost

- name: Create passwords directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ playbook_dir }}/../files/passwords"
    state: directory
    mode: "0755"
  delegate_to: localhost
  when: not passwords_dir.stat.exists

- name: Ensure validators password file exists
  ansible.builtin.copy:
    content: "ephemery"
    dest: "{{ playbook_dir }}/../files/passwords/validators.txt"
    mode: "0600"
    force: false
  delegate_to: localhost
  when: not passwords_dir.stat.exists or (passwords_dir.stat.exists and not passwords_dir.stat.isdir)

- name: Copy password file to remote
  ansible.builtin.copy:
    src: "{{ validator_keys_password_file }}"
    dest: "{{ ephemery_base_dir }}/secrets/validator/passwords/validators.txt"
    mode: "0600"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  register: password_copied

- name: Copy validator definitions file if it exists
  ansible.builtin.copy:
    src: "{{ lookup('env', 'PWD') }}/files/validator_definitions.yaml"
    dest: "{{ ephemery_base_dir }}/secrets/validator/validator_definitions.yaml"
    mode: "0600"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  register: definitions_copied
  failed_when: false

# Include the new validator key extraction tasks
- name: Include validator key extraction tasks
  ansible.builtin.include_tasks:
    file: validator-key-extraction.yaml

- name: Move extracted validator keys to secrets directory
  ansible.builtin.shell: |
    set -o pipefail
    # First ensure the target directory exists and is empty
    mkdir -p {{ ephemery_base_dir }}/secrets/validator/keys

    # Count keystore files before moving
    KEYSTORE_COUNT=$(find {{ extracted_keys_dir }} -name "keystore*.json" | wc -l)
    echo "Found ${KEYSTORE_COUNT} keystore files to move"

    # Move keystore files to validator keys directory using a staged approach
    TEMP_STAGING="{{ ephemery_base_dir }}/tmp/staging_keys"
    mkdir -p "${TEMP_STAGING}"

    # Copy files to staging first - using atomic approach
    find {{ extracted_keys_dir }} -name "keystore*.json" \
      -exec cp {} "${TEMP_STAGING}/" \;

    # Verify all files were copied successfully
    STAGING_COUNT=$(find "${TEMP_STAGING}" -name "keystore*.json" | wc -l)

    if [ "$STAGING_COUNT" -eq "$KEYSTORE_COUNT" ]; then
      # Clear destination directory
      rm -f {{ ephemery_base_dir }}/secrets/validator/keys/keystore*.json

      # Move from staging to final location (atomic operation)
      mv "${TEMP_STAGING}"/* {{ ephemery_base_dir }}/secrets/validator/keys/

      echo "Successfully moved ${STAGING_COUNT} keystore files"
    else
      echo "Error: File count mismatch. Found ${KEYSTORE_COUNT} but staged ${STAGING_COUNT}"
      exit 1
    fi
  args:
    executable: /bin/bash
  when: extraction_success is defined and extraction_success|bool
  register: moved_keys

- name: Validate key file formats and integrity
  ansible.builtin.shell: |
    # Remove any keystore files that don't have the required pubkey field
    # Also check for JSON validity and standard format
    REMOVED_COUNT=0
    VALID_COUNT=0
    INVALID_FORMAT=0

    for keyfile in $(find {{ ephemery_base_dir }}/secrets/validator/keys -type f -name "keystore*.json"); do
      # Check if file is valid JSON
      if ! jq empty "$keyfile" 2>/dev/null; then
        echo "Invalid JSON format in file: $keyfile"
        INVALID_FORMAT=$((INVALID_FORMAT+1))
      fi

      # Check for required pubkey field
      if ! grep -q "pubkey" "$keyfile"; then
        echo "Missing pubkey field in keystore file: $keyfile"
        rm -f "$keyfile"
        REMOVED_COUNT=$((REMOVED_COUNT+1))
      else
        VALID_COUNT=$((VALID_COUNT+1))
      fi
    done

    # Output summary
    echo "Validator key validation results:"
    echo "Valid keys: $VALID_COUNT"
    echo "Invalid keys removed: $REMOVED_COUNT"
    echo "Invalid JSON format detected: $INVALID_FORMAT"

    # Create a validation report file - escape the EOF to avoid YAML parsing errors
    echo "Key Validation Report ($(date))" > "{{ ephemery_base_dir }}/secrets/validator/key_validation_report.txt"
    echo "===============================" >> "{{ ephemery_base_dir }}/secrets/validator/key_validation_report.txt"
    echo "Valid Keys: $VALID_COUNT" >> "{{ ephemery_base_dir }}/secrets/validator/key_validation_report.txt"
    echo "Invalid Keys Removed: $REMOVED_COUNT" >> "{{ ephemery_base_dir }}/secrets/validator/key_validation_report.txt"
    echo "Invalid JSON Format: $INVALID_FORMAT" >> "{{ ephemery_base_dir }}/secrets/validator/key_validation_report.txt"
  args:
    executable: /bin/bash
  register: validation_results
  changed_when: >
    validation_results.stdout is defined and
    "Invalid keys removed: 0" not in validation_results.stdout

- name: Display key validation results
  ansible.builtin.debug:
    msg: "{{ validation_results.stdout_lines }}"
  when: validation_results.stdout is defined

- name: Count actual validator keys
  ansible.builtin.shell: |
    set -o pipefail
    find {{ ephemery_base_dir }}/secrets/validator/keys -type f -name "keystore*.json" | wc -l
  args:
    executable: /bin/bash
  register: actual_key_count
  changed_when: false

- name: Validate key count against expected count
  ansible.builtin.debug:
    msg: |
      +-----------------------------------------------------------+
      |                VALIDATOR KEY COUNT VALIDATION              |
      +-----------------------------------------------------------+
      | Expected key count: {{ expected_key_count }}
      | Actual key count: {{ actual_key_count.stdout | trim }}
      |
      | {% if expected_key_count | int > 0 and actual_key_count.stdout | int != expected_key_count | int %}
      | WARNING: Key count mismatch detected!
      | {% elif expected_key_count | int == 0 %}
      | NOTE: No expected key count was specified. Found {{ actual_key_count.stdout | trim }} keys.
      | {% else %}
      | Success: Found expected number of validator keys.
      | {% endif %}
      +-----------------------------------------------------------+
  when: actual_key_count is defined

- name: Fail if key count is zero
  ansible.builtin.fail:
    msg: |
      CRITICAL ERROR: No validator keys were found!
      Please check the validator_keys_src path and ensure it contains valid keystore files.
  when: actual_key_count is defined and actual_key_count.stdout|trim == "0"

- name: Warn if key count mismatch
  ansible.builtin.debug:
    msg: |
      WARNING: Key count mismatch detected!
      Expected: {{ expected_key_count }} keys
      Found: {{ actual_key_count.stdout | trim }} keys
      This may affect validator performance. Check your key source and extraction process.
  when: expected_key_count|int > 0 and actual_key_count.stdout|int != expected_key_count|int

- name: Set proper permissions on copied files
  ansible.builtin.file:
    path: "{{ ephemery_base_dir }}/secrets/validator/keys"
    state: directory
    mode: "0600"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: true
  when: moved_keys is defined and (moved_keys.changed or moved_keys.rc == 0)

- name: Set beacon API endpoint
  ansible.builtin.set_fact:
    beacon_api_endpoint: >
      {% if cl == 'lighthouse' or cl == 'teku' or cl == 'lodestar' %}http://127.0.0.1:5052
      {% elif cl == 'prysm' %}http://127.0.0.1:4000
      {% else %}http://127.0.0.1:5052{% endif %}

- name: Ensure validator keys directory is not empty
  ansible.builtin.shell: |
    if [ ! "$(ls -A {{ ephemery_base_dir }}/secrets/validator/keys/)" ]; then
      echo "Warning: No validator keys found in {{ ephemery_base_dir }}/secrets/validator/keys/"
      echo "Please ensure you have copied your validator keys to the correct location"
      exit 1
    fi
  changed_when: false
  register: validator_keys_check
  failed_when: false

- name: Report validator keys check result
  ansible.builtin.debug:
    msg: "{{ validator_keys_check.stdout_lines }}"
  when: validator_keys_check is defined

- name: Wait for a moment before starting validator to ensure sync progress
  ansible.builtin.pause:
    seconds: 5
  when: moved_keys is defined and moved_keys.changed

- name: Check lighthouse beacon sync status before starting validator
  ansible.builtin.shell: |
    set -o pipefail
    kubectl -n {{ kubernetes_namespace }} exec {{ lighthouse_pod_name.stdout }} -- curl -s localhost:5052/eth/v1/node/syncing
  args:
    executable: /bin/bash
  register: sync_status
  changed_when: false

- name: Display sync status
  ansible.builtin.debug:
    msg: "{{ sync_status.stdout_lines }}"
  when: sync_status is defined and sync_status.stdout_lines is defined

- name: Start validator with custom keys (Lighthouse)
  community.docker.docker_container:
    name: "{{ network }}-validator-{{ cl }}"
    image: "{{ client_images.validator }}"
    state: started
    restart_policy: unless-stopped
    memory: '{{ validator_memory_limit | default("1g") }}'
    network_mode: host
    volumes:
      - "{{ ephemery_base_dir }}/data/validator:/data:rw"
      - "{{ ephemery_base_dir }}/secrets/validator/keys:/secrets/keys:ro"
      - "{{ ephemery_base_dir }}/secrets/validator/passwords:/secrets/passwords:ro"
      - "{{ jwt_secret_path }}:/execution-auth.jwt:ro"
      - "{{ ephemery_base_dir }}/config/ephemery_network:/ephemery_config:ro"
    command: >
      lighthouse validator_client
      --beacon-nodes {{ beacon_api_endpoint }}
      --datadir /data
      --testnet-dir /ephemery_config
      --validators-dir /secrets/keys
      --secrets-dir /secrets/passwords
  when: cl == 'lighthouse'
  register: start_lighthouse_validator

- name: Create validator monitoring script
  ansible.builtin.template:
    src: validator_monitor.sh.j2
    dest: "{{ ephemery_base_dir }}/scripts/validator_monitor.sh"
    mode: "0755"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Setup validator monitoring cron job
  ansible.builtin.cron:
    name: "Monitor validator status"
    minute: "*/10"
    job: "{{ ephemery_base_dir }}/scripts/validator_monitor.sh > {{ ephemery_base_dir }}/data/validator/monitor.log 2>&1"
    user: "{{ ansible_user }}"

- name: Run initial validator monitoring
  ansible.builtin.shell: |
    mkdir -p {{ ephemery_base_dir }}/scripts
    {{ ephemery_base_dir }}/scripts/validator_monitor.sh
  args:
    executable: /bin/bash
  register: initial_monitor
  changed_when: false

- name: Display validator status information
  ansible.builtin.debug:
    msg: "{{ initial_monitor.stdout_lines }}"
  when: initial_monitor is defined and initial_monitor.stdout_lines is defined
