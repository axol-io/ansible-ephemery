---
# Standardized JWT management tasks
# Can be included by any playbook that needs to handle JWT secrets

# Check if JWT file exists
- name: Check if JWT file exists
  ansible.builtin.stat:
    path: "{{ jwt_secret_path }}"
  register: jwt_file_stat

# Ensure parent directory exists for JWT
- name: Ensure parent directory exists for JWT
  ansible.builtin.file:
    path: "{{ jwt_secret_path | dirname }}"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user | default('root') }}"
    group: "{{ ansible_user | default('root') }}"
  when: not jwt_file_stat.stat.exists

# Generate JWT secret if needed
- name: Generate JWT secret if needed
  ansible.builtin.shell: |
    openssl rand -hex 32 > {{ jwt_secret_path }}
    chmod 600 {{ jwt_secret_path }}
  when: not jwt_file_stat.stat.exists

# Validate and fix JWT secret format
- name: Validate and fix JWT secret format
  ansible.builtin.shell: |
    JWT_CONTENT=$(cat {{ jwt_secret_path }})
    # Remove any "0x" prefix and whitespace
    CLEAN_JWT=$(echo "$JWT_CONTENT" | sed 's/^0x//g' | tr -d '[:space:]')
    # Validate the format is exactly 64 hex characters
    if ! echo "$CLEAN_JWT" | grep -qE '^[0-9a-f]{64}$'; then
      echo "Invalid JWT format, regenerating..."
      openssl rand -hex 32 > {{ jwt_secret_path }}
    else
      # Ensure consistent format (no 0x, no whitespace)
      echo "$CLEAN_JWT" > {{ jwt_secret_path }}
    fi
  register: jwt_validate
  changed_when: "'regenerating' in jwt_validate.stdout"

# Ensure proper permissions on JWT file
- name: Ensure proper permissions on JWT file
  ansible.builtin.file:
    path: "{{ jwt_secret_path }}"
    mode: "0600"
    owner: "{{ ansible_user | default('root') }}"
    group: "{{ ansible_user | default('root') }}"
  when: jwt_file_stat.stat.exists

# Check for previous JWT location at /root/jwtsecret
- name: Check for previous JWT location at /root/jwtsecret
  ansible.builtin.stat:
    path: "/root/jwtsecret"
  register: old_jwt_path

# Migrate old JWT location if needed
- name: Migrate old JWT location if needed
  ansible.builtin.shell: |
    cp /root/jwtsecret {{ jwt_secret_path }}
    chmod 600 {{ jwt_secret_path }}
  when: old_jwt_path.stat.exists and not jwt_file_stat.stat.exists

# If jwt_secret_path is not at standard location, create a symlink
- name: Create symlink for standard JWT path if needed
  ansible.builtin.file:
    src: "{{ jwt_secret_path }}"
    dest: "{{ ephemery_base_dir }}/jwt.hex"
    state: link
    force: true
  when: 
    - jwt_secret_path != ephemery_base_dir + '/jwt.hex'
    - create_jwt_symlink | default(true) | bool

# Backup the JWT file
- name: Create backup directory for JWT
  ansible.builtin.file:
    path: "{{ ephemery_base_dir }}/backups"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user | default('root') }}"
    group: "{{ ansible_user | default('root') }}"
  when: backup_jwt | default(false) | bool

- name: Backup JWT file
  ansible.builtin.copy:
    src: "{{ jwt_secret_path }}"
    dest: "{{ ephemery_base_dir }}/backups/jwt.hex.{{ ansible_date_time.iso8601_basic_short }}"
    remote_src: true
    mode: "0600"
  when: 
    - jwt_file_stat.stat.exists
    - backup_jwt | default(false) | bool 