---
# Playbook to fix container configurations on deployed Ephemery nodes
# This playbook addresses common configuration issues that could prevent proper operation

- name: Fix Container Configurations
  hosts: ephemery_nodes
  become: true
  vars:
    jwt_secret_path: "{{ jwt_secret_path | default(ephemery_base_dir + '/jwt.hex') }}"
    fix_all: true   # Set to true to fix all known issues, or false to only run diagnostics
    recreate_lighthouse: false  # Will be set to true if issues are detected
    recreate_geth: false  # Will be set to true if issues are detected
    backup_data: true  # Whether to backup data directories before making changes
  
  tasks:
    - name: Load ephemery configuration variables
      include_vars:
        file: ../vars/ephemery_variables.yaml
        
    - name: Set up container names
      set_fact:
        el_container: "{{ network }}-{{ el }}"
        cl_container: "{{ network }}-{{ cl }}"
        
    # Create verification script
    - name: Create container verification script
      template:
        src: "../templates/scripts/verify_containers.sh.j2"
        dest: "{{ ephemery_scripts_dir }}/verify_containers.sh"
        mode: '0755'
      
    # Run diagnostics first
    - name: Run container verification script for diagnostics
      command: "{{ ephemery_scripts_dir }}/verify_containers.sh"
      register: verification_output
      changed_when: false
      failed_when: false
      
    - name: Display verification results
      debug:
        msg: "{{ verification_output.stdout_lines }}"
        
    # Check for Lighthouse container issues
    - name: Check if Lighthouse container needs fixing
      shell: "docker inspect {{ cl_container }} --format='{% raw %}{{.Config.Entrypoint}}{% endraw %}'"
      register: lighthouse_entrypoint
      changed_when: false
      failed_when: false
      when: cl == "lighthouse"
      
    - name: Check Lighthouse command format
      shell: "docker inspect {{ cl_container }} --format='{% raw %}{{.Config.Cmd}}{% endraw %}'"
      register: lighthouse_cmd
      changed_when: false
      failed_when: false
      when: cl == "lighthouse"
    
    # Identify Lighthouse configuration issues and set flag
    - name: Check for empty Lighthouse entrypoint
      set_fact:
        lighthouse_bad_entrypoint: "{{ lighthouse_entrypoint.stdout is defined and (lighthouse_entrypoint.stdout == '[]' or lighthouse_entrypoint.stdout == '<no value>' or lighthouse_entrypoint.stdout == '') }}"
      when: cl == "lighthouse"
      
    - name: Check for incorrect JWT format in Lighthouse
      set_fact:
        lighthouse_bad_jwt: "{{ '--execution-jwt=/jwt.hex' in lighthouse_cmd.stdout|default('') }}"
      when: cl == "lighthouse"
      
    - name: Check for errors in verification
      set_fact:
        lighthouse_has_errors: "{{ verification_output.stdout is search('ERROR: Lighthouse') }}"
      when: cl == "lighthouse"
      
    - name: Determine if Lighthouse needs to be recreated
      set_fact:
        recreate_lighthouse: "{{ lighthouse_bad_entrypoint|default(false) or lighthouse_bad_jwt|default(false) or lighthouse_has_errors|default(false) }}"
      when: cl == "lighthouse"
           
    # Check for Geth container issues
    - name: Check Geth JWT configuration
      shell: "docker inspect {{ el_container }} --format='{% raw %}{{.Config.Cmd}}{% endraw %}'"
      register: geth_cmd
      changed_when: false
      failed_when: false
      when: el == "geth"
      
    # Check Geth configuration
    - name: Check for missing JWT parameter in Geth
      set_fact:
        geth_missing_jwt: "{{ not ('authrpc.jwtsecret=/jwt.hex' in geth_cmd.stdout|default('')) }}"
      when: el == "geth"
      
    - name: Check for errors in Geth verification
      set_fact:
        geth_has_errors: "{{ verification_output.stdout is search('ERROR: Geth') }}"
      when: el == "geth"
      
    - name: Determine if Geth needs to be recreated
      set_fact:
        recreate_geth: "{{ geth_missing_jwt|default(false) or geth_has_errors|default(false) }}"
      when: el == "geth"
           
    # Include JWT secret management
    - name: Include JWT secret management tasks
      include_tasks: ../tasks/jwt-secret.yaml
      tags: [jwt, security]
      
    # Backup data if needed
    - name: Create backup directory
      file:
        path: "{{ ephemery_base_dir }}/backups"
        state: directory
        mode: '0755'
      when: backup_data|bool and (recreate_lighthouse|bool or recreate_geth|bool)
      
    - name: Backup lighthouse data
      archive:
        path: "{{ ephemery_base_dir }}/data/cl"
        dest: "{{ ephemery_base_dir }}/backups/lighthouse_data_{{ ansible_date_time.iso8601_basic_short }}.tar.gz"
        format: gz
      when: backup_data|bool and recreate_lighthouse|bool and cl == "lighthouse"
      
    - name: Backup geth data
      archive:
        path: "{{ ephemery_base_dir }}/data/el"
        dest: "{{ ephemery_base_dir }}/backups/geth_data_{{ ansible_date_time.iso8601_basic_short }}.tar.gz"
        format: gz
      when: backup_data|bool and recreate_geth|bool and el == "geth"
      
    # Fix Lighthouse container if needed
    - name: Stop Lighthouse container if it needs to be recreated
      docker_container:
        name: "{{ cl_container }}"
        state: stopped
      when: recreate_lighthouse|bool and fix_all|bool and cl == "lighthouse"
      
    - name: Remove Lighthouse container if it needs to be recreated
      docker_container:
        name: "{{ cl_container }}"
        state: absent
      when: recreate_lighthouse|bool and fix_all|bool and cl == "lighthouse"
      
    - name: Recreate Lighthouse container with proper configuration
      docker_container:
        name: "{{ cl_container }}"
        image: "pk910/ephemery-lighthouse:latest"
        state: started
        restart_policy: always
        network_mode: host
        volumes:
          - "{{ ephemery_base_dir }}/data/cl:/data"
          - "{{ jwt_secret_path }}:/jwt.hex"
          - "{{ ephemery_base_dir }}/config/ephemery_network:/ephemery_config:ro"
        entrypoint: /wrapper/wrapper.sh
        command: >
          beacon_node
          --datadir=/data
          --execution-jwt /jwt.hex
          --execution-endpoint=http://127.0.0.1:8551
          --http
          --http-address=0.0.0.0
          --http-port=5052
          --metrics
          --metrics-address=0.0.0.0
          --metrics-port=5054
          --testnet-dir=/ephemery_config
          --target-peers=100
          --execution-timeout-multiplier=5
          --allow-insecure-genesis-sync
      when: recreate_lighthouse|bool and fix_all|bool and cl == "lighthouse"
      
    # Fix Geth container if needed
    - name: Stop Geth container if it needs to be recreated
      docker_container:
        name: "{{ el_container }}"
        state: stopped
      when: recreate_geth|bool and fix_all|bool and el == "geth"
      
    - name: Remove Geth container if it needs to be recreated
      docker_container:
        name: "{{ el_container }}"
        state: absent
      when: recreate_geth|bool and fix_all|bool and el == "geth"
      
    - name: Recreate Geth container with proper configuration
      docker_container:
        name: "{{ el_container }}"
        image: "pk910/ephemery-geth:latest"
        state: started
        restart_policy: always
        network_mode: host
        volumes:
          - "{{ ephemery_base_dir }}/data/el:/data"
          - "{{ jwt_secret_path }}:/jwt.hex"
        command: >
          --datadir=/data
          --authrpc.jwtsecret=/jwt.hex
          --http
          --http.api=eth,net,web3,engine
          --http.addr=0.0.0.0
          --http.corsdomain=*
          --http.vhosts=*
          --ws
          --ws.api=eth,net,web3,engine
          --ws.addr=0.0.0.0
          --ws.origins=*
          --cache=4096
          --txlookuplimit=0
          --syncmode=snap
          --maxpeers=100
      when: recreate_geth|bool and fix_all|bool and el == "geth"
      
    # Verify changes
    - name: Run container verification script again after fixes
      command: "{{ ephemery_scripts_dir }}/verify_containers.sh"
      register: verification_output_after
      changed_when: false
      when: fix_all|bool and (recreate_lighthouse|bool or recreate_geth|bool)
      
    - name: Display verification results after fixes
      debug:
        msg: "{{ verification_output_after.stdout_lines }}"
      when: fix_all|bool and (recreate_lighthouse|bool or recreate_geth|bool)
      
    # Report on what was done
    - name: Report on changes made
      debug:
        msg:
          - "Fix container configurations playbook completed"
          - "Fixes applied: {{ fix_all|bool }}"
          - "Lighthouse container recreated: {{ recreate_lighthouse|bool }}"
          - "Geth container recreated: {{ recreate_geth|bool }}"
          - "Diagnostics only mode: {{ not fix_all|bool }}" 