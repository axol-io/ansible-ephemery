---
# Comprehensive playbook to fix common issues with Ephemery nodes
# This playbook addresses:
# 1. JWT secret consistency and format
# 2. Container configuration issues
# 3. Path permissions and symlinks
# 4. Verification of proper setup

- name: Fix Ephemery Node Configuration
  hosts: ephemery
  become: true
  vars:
    ephemery_base_dir: "{{ directories.base | default('/opt/ephemery') }}"
    ephemery_data_dir: "{{ directories.data | default('/opt/ephemery/data') }}"
    jwt_secret_path: "{{ jwt_secret_path | default(ephemery_base_dir + '/jwt.hex') }}"
    # Flags for fixing specific issues
    fix_jwt: true
    fix_containers: true
    backup_data: true
    backup_jwt: true
    run_diagnostics: true
    create_jwt_symlink: true
  tasks:
    - name: Load configuration variables
      ansible.builtin.include_vars:
        dir: "{{ playbook_dir }}/../vars"
        extensions: ['yaml', 'yml']
      tags: always

    - name: Set fact for Docker container names
      ansible.builtin.set_fact:
        el_container: "{{ network }}-{{ el }}"
        cl_container: "{{ network }}-{{ cl }}"
      tags: always

    # Diagnostic section
    - name: Run diagnostics
      block:
        - name: Check if Docker is running
          ansible.builtin.command: docker ps
          register: docker_status
          changed_when: false
          failed_when: docker_status.rc != 0
          
        - name: Check if Lighthouse container exists
          ansible.builtin.command: docker ps -a --format '{% raw %}{{.Names}}{% endraw %}' | grep {{ cl_container }}
          register: lighthouse_container
          changed_when: false
          failed_when: false
          
        - name: Check if Geth container exists
          ansible.builtin.command: docker ps -a --format '{% raw %}{{.Names}}{% endraw %}' | grep {{ el_container }}
          register: geth_container
          changed_when: false
          failed_when: false
          
        - name: Check system disk space
          ansible.builtin.command: df -h
          register: disk_space
          changed_when: false
      when: run_diagnostics | bool
      tags: diagnostics

    # JWT Secret Fixes
    - name: Fix JWT Secret
      block:
        - name: Include JWT secret management tasks
          ansible.builtin.include_tasks: ../tasks/jwt-management.yaml
      when: fix_jwt | bool
      tags: jwt

    # Backup section
    - name: Backup data
      block:
        - name: Check container volumes worth backing up
          ansible.builtin.command: docker inspect {{ item }} -f "{% raw %}{{range .Mounts}}{{if eq .Destination \"/data\"}}{{.Source}}{{end}}{{end}}{% endraw %}"
          loop:
            - "{{ el_container }}"
            - "{{ cl_container }}"
          register: container_volumes
          changed_when: false
          failed_when: false
          when: backup_data | bool
      when: backup_data | bool
      tags: backup

    # Container Configuration Fixes
    - name: Fix Container Configurations
      block:
        # Stop containers to update configuration
        - name: Stop execution client container
          community.docker.docker_container:
            name: "{{ el_container }}"
            state: stopped
          when: el is defined
          ignore_errors: true

        - name: Stop consensus client container
          community.docker.docker_container:
            name: "{{ cl_container }}"
            state: stopped
          when: cl is defined
          ignore_errors: true

        # Check for Lighthouse configuration issues
        - name: Check Lighthouse container configuration
          ansible.builtin.command: docker inspect {{ cl_container }}
          register: lighthouse_inspect
          changed_when: false
          failed_when: false
          when: cl is defined and cl == "lighthouse"

        - name: Check if Lighthouse entrypoint is incorrect
          ansible.builtin.set_fact:
            lighthouse_entrypoint_fix: true
          when: 
            - cl is defined and cl == "lighthouse"
            - lighthouse_inspect.rc == 0
            - "'/wrapper/wrapper.sh' not in lighthouse_inspect.stdout"

        - name: Check if Lighthouse JWT path is incorrect
          ansible.builtin.set_fact:
            lighthouse_jwt_fix: true
          when: 
            - cl is defined and cl == "lighthouse"
            - lighthouse_inspect.rc == 0
            - "'--execution-jwt /jwt.hex' not in lighthouse_inspect.stdout"
            - "'--execution-jwt=/jwt.hex' in lighthouse_inspect.stdout or 'execution-jwt' not in lighthouse_inspect.stdout"

        # Check for Geth configuration issues
        - name: Check Geth container configuration
          ansible.builtin.command: docker inspect {{ el_container }}
          register: geth_inspect
          changed_when: false
          failed_when: false
          when: el is defined and el == "geth"

        - name: Check if Geth JWT path is incorrect
          ansible.builtin.set_fact:
            geth_jwt_fix: true
          when: 
            - el is defined and el == "geth"
            - geth_inspect.rc == 0
            - "'--authrpc.jwtsecret=/jwt.hex' not in geth_inspect.stdout"

        # Fix client configurations
        - name: Start execution client with correct JWT path
          community.docker.docker_container:
            name: "{{ el_container }}"
            image: "{{ client_images[el] }}"
            state: started
            restart_policy: unless-stopped
            network_mode: host
            volumes:
              - "{{ ephemery_data_dir }}/{{ el }}:/data"
              - "{{ jwt_secret_path }}:/jwt.hex"
            command: >
              {% if el == "geth" %}
              --datadir=/data
              --authrpc.jwtsecret=/jwt.hex
              --http
              --http.api=eth,net,web3,engine
              --http.addr=0.0.0.0
              --http.corsdomain=*
              --http.vhosts=*
              --ws
              --ws.api=eth,net,web3,engine
              --ws.addr=0.0.0.0
              --ws.origins=*
              --cache=4096
              --txlookuplimit=0
              --syncmode=snap
              --maxpeers=100
              {{ el_extra_opts | default('') }}
              {% endif %}
          when: 
            - el is defined and el == "geth"
            - geth_jwt_fix | default(false) | bool

        - name: Start consensus client with correct JWT path
          community.docker.docker_container:
            name: "{{ cl_container }}"
            image: "{{ client_images[cl] }}"
            state: started
            restart_policy: unless-stopped
            network_mode: host
            volumes:
              - "{{ ephemery_data_dir }}/{{ cl }}:/data"
              - "{{ jwt_secret_path }}:/jwt.hex"
              - "{{ ephemery_base_dir }}/config/ephemery_network:/ephemery_config:ro"
            entrypoint: /wrapper/wrapper.sh
            command: >
              {% if cl == "lighthouse" %}
              beacon_node
              --datadir=/data
              --execution-jwt /jwt.hex
              --execution-endpoint=http://127.0.0.1:8551
              --http
              --http-address=0.0.0.0
              --http-port=5052
              --metrics
              --metrics-address=0.0.0.0
              --metrics-port=5054
              --testnet-dir=/ephemery_config
              --target-peers=100
              --execution-timeout-multiplier=5
              {{ cl_extra_opts | default('') }}
              {% endif %}
          when: 
            - cl is defined and cl == "lighthouse"
            - lighthouse_entrypoint_fix | default(false) | bool or lighthouse_jwt_fix | default(false) | bool
      when: fix_containers | bool
      tags: containers

    # Verification and status
    - name: Verify fixes
      block:
        - name: Check container status
          ansible.builtin.command: docker ps -a
          register: container_status
          changed_when: false
          
        - name: Display container status
          ansible.builtin.debug:
            var: container_status.stdout_lines
            
        - name: Check consensus client syncing status
          ansible.builtin.uri:
            url: http://localhost:5052/eth/v1/node/syncing
            return_content: true
          register: consensus_sync
          failed_when: false
          
        - name: Display consensus sync status
          ansible.builtin.debug:
            var: consensus_sync.content | default('Consensus client not responding')
            
        - name: Check execution client syncing status
          ansible.builtin.shell: |
            curl -s -X POST --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' \
            -H 'Content-Type: application/json' http://localhost:8545
          register: execution_sync
          failed_when: false
          changed_when: false
          
        - name: Display execution sync status
          ansible.builtin.debug:
            var: execution_sync.stdout | default('Execution client not responding')
      tags: verify 