---
# Playbook to fix JWT path consistency in ephemery nodes
# This playbook ensures the JWT configuration is consistent across all nodes

- name: Fix JWT Path Consistency
  hosts: ephemery
  become: true
  vars:
    ephemery_base_dir: "{{ directories.base | default('/root/ephemery') }}"
    ephemery_data_dir: "{{ directories.data | default('/root/ephemery/data') }}"
    jwt_secret_path: "{{ jwt_secret_path | default(ephemery_base_dir + '/jwt.hex') }}"
  tasks:
    - name: Set fact for Docker container names
      ansible.builtin.set_fact:
        el_container: "{{ network }}-{{ el }}"
        cl_container: "{{ network }}-{{ cl }}"

    - name: Check if JWT file exists
      ansible.builtin.stat:
        path: "{{ jwt_secret_path }}"
      register: jwt_file_stat

    - name: Ensure parent directory exists for JWT
      ansible.builtin.file:
        path: "{{ jwt_secret_path | dirname }}"
        state: directory
        mode: "0755"
        owner: "{{ ansible_user | default('root') }}"
        group: "{{ ansible_user | default('root') }}"
      when: not jwt_file_stat.stat.exists

    - name: Generate JWT secret if needed
      ansible.builtin.shell: |
        openssl rand -hex 32 > {{ jwt_secret_path }}
        chmod 600 {{ jwt_secret_path }}
      when: not jwt_file_stat.stat.exists

    # Validate and fix the JWT file format
    - name: Validate and fix JWT secret format
      ansible.builtin.shell: |
        JWT_CONTENT=$(cat {{ jwt_secret_path }})
        # Remove any "0x" prefix and whitespace
        CLEAN_JWT=$(echo "$JWT_CONTENT" | sed 's/^0x//g' | tr -d '[:space:]')
        # Validate the format is exactly 64 hex characters
        if ! echo "$CLEAN_JWT" | grep -qE '^[0-9a-f]{64}$'; then
          echo "Invalid JWT format, regenerating..."
          openssl rand -hex 32 > {{ jwt_secret_path }}
        else
          # Ensure consistent format (no 0x, no whitespace)
          echo "$CLEAN_JWT" > {{ jwt_secret_path }}
        fi
      register: jwt_validate
      changed_when: "'regenerating' in jwt_validate.stdout"

    - name: Ensure proper permissions on JWT file
      ansible.builtin.file:
        path: "{{ jwt_secret_path }}"
        mode: "0600"
        owner: "{{ ansible_user | default('root') }}"
        group: "{{ ansible_user | default('root') }}"
      when: jwt_file_stat.stat.exists

    - name: Check for previous JWT location at /root/jwtsecret
      ansible.builtin.stat:
        path: "/root/jwtsecret"
      register: old_jwt_path

    - name: Migrate old JWT location if needed
      ansible.builtin.shell: |
        cp /root/jwtsecret {{ jwt_secret_path }}
        chmod 600 {{ jwt_secret_path }}
      when: old_jwt_path.stat.exists and not jwt_file_stat.stat.exists

    # If jwt_secret_path is not at standard location, create a symlink
    - name: Create symlink for standard JWT path if needed
      ansible.builtin.file:
        src: "{{ jwt_secret_path }}"
        dest: "{{ ephemery_base_dir }}/jwt.hex"
        state: link
        force: true
      when: jwt_secret_path != ephemery_base_dir + '/jwt.hex'

    # Backup the JWT file
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ ephemery_base_dir }}/backups"
        state: directory
        mode: "0755"
        owner: "{{ ansible_user | default('root') }}"
        group: "{{ ansible_user | default('root') }}"

    - name: Backup JWT file
      ansible.builtin.copy:
        src: "{{ jwt_secret_path }}"
        dest: "{{ ephemery_base_dir }}/backups/jwt.hex.{{ ansible_date_time.iso8601_basic_short }}"
        remote_src: true
        mode: "0600"
      when: jwt_file_stat.stat.exists

    # Stop containers to update configuration
    - name: Stop execution client container
      community.docker.docker_container:
        name: "{{ el_container }}"
        state: stopped
      when: el is defined
      ignore_errors: true

    - name: Stop consensus client container
      community.docker.docker_container:
        name: "{{ cl_container }}"
        state: stopped
      when: cl is defined
      ignore_errors: true

    # Update container configurations
    - name: Start execution client with correct JWT path
      community.docker.docker_container:
        name: "{{ el_container }}"
        image: "{{ client_images[el] }}"
        state: started
        restart_policy: unless-stopped
        network_mode: host
        volumes:
          - "{{ ephemery_data_dir }}/{{ el }}:/data"
          - "{{ jwt_secret_path }}:/jwt.hex"
        command: >
          {% if el == "geth" %}
          --datadir=/data
          --authrpc.jwtsecret=/jwt.hex
          --http
          --http.api=eth,net,web3,engine
          --http.addr=0.0.0.0
          --http.corsdomain=*
          --http.vhosts=*
          --ws
          --ws.api=eth,net,web3,engine
          --ws.addr=0.0.0.0
          --ws.origins=*
          --cache=4096
          --txlookuplimit=0
          --syncmode=snap
          --maxpeers=100
          {{ el_extra_opts | default('') }}
          {% endif %}
      when: el is defined and el == "geth"

    - name: Start consensus client with correct JWT path
      community.docker.docker_container:
        name: "{{ cl_container }}"
        image: "{{ client_images[cl] }}"
        state: started
        restart_policy: unless-stopped
        network_mode: host
        volumes:
          - "{{ ephemery_data_dir }}/{{ cl }}:/data"
          - "{{ jwt_secret_path }}:/jwt.hex"
          - "{{ ephemery_base_dir }}/config/ephemery_network:/ephemery_config:ro"
        entrypoint: /wrapper/wrapper.sh
        command: >
          {% if cl == "lighthouse" %}
          beacon_node
          --datadir=/data
          --execution-jwt /jwt.hex
          --execution-endpoint=http://127.0.0.1:8551
          --http
          --http-address=0.0.0.0
          --http-port=5052
          --metrics
          --metrics-address=0.0.0.0
          --metrics-port=5054
          --testnet-dir=/ephemery_config
          --target-peers=100
          --execution-timeout-multiplier=5
          {{ cl_extra_opts | default('') }}
          {% endif %}
      when: cl is defined and cl == "lighthouse"

    # Verification step
    - name: Verify container status
      ansible.builtin.shell: "docker ps -a | grep -E '{{ el_container }}|{{ cl_container }}'"
      register: container_status
      changed_when: false
      
    - name: Display container status
      ansible.builtin.debug:
        var: container_status.stdout_lines 