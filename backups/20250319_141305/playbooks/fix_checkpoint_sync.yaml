---
# Playbook to fix checkpoint sync issues
- name: Fix Checkpoint Sync for Ephemery
  hosts: ephemery
  become: true
  gather_facts: true
  strategy: linear  # Adding strategy directive to address run-once warnings

  tasks:
    - name: Check if currently used checkpoint sync URL is accessible
      ansible.builtin.uri:
        url: "{{ checkpoint_sync_url }}/eth/v1/beacon/states/finalized"
        method: GET
        timeout: 10
        status_code: [200, 403, 404, 500, 503] # Accept various status codes to check availability
      register: checkpoint_url_check
      ignore_errors: true

    - name: Display checkpoint sync URL status
      ansible.builtin.debug:
        msg: "Current checkpoint sync URL ({{ checkpoint_sync_url }}) status: {{ checkpoint_url_check.status | default('Unreachable')
          }}"

    - name: Test alternative checkpoint sync URLs
      ansible.builtin.uri:
        url: "{{ item }}/eth/v1/beacon/states/finalized"
        method: GET
        timeout: 10
        status_code: [200, 403, 404, 500, 503]
      register: alternative_urls
      loop:
        - https://checkpoint-sync.ephemery.ethpandaops.io
        - https://beaconstate-ephemery.chainsafe.io
        - https://checkpoint-sync.ephemery.dev
        - https://checkpoint.ephemery.eth.limo
      ignore_errors: true

    - name: Set best checkpoint sync URL
      ansible.builtin.set_fact:
        working_checkpoint_url: "{{ item.item }}"
      loop: "{{ alternative_urls.results }}"
      when: item.status is defined and item.status == 200
      loop_control:
        label: "{{ item.item }}"
      run_once: true
      register: best_url_result

    - name: Fallback to original URL if no alternatives work
      ansible.builtin.set_fact:
        working_checkpoint_url: "{{ checkpoint_sync_url }}"
      when: best_url_result.changed is not defined or not best_url_result.changed

    - name: Update inventory file with working checkpoint URL
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/../../inventories/inventory.yaml"
        regexp: "checkpoint_sync_url: '.*'"
        line: "    checkpoint_sync_url: '{{ working_checkpoint_url }}'"
        backrefs: true
      run_once: true
      delegate_to: localhost

    - name: Enable checkpoint sync in inventory file
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/../../inventories/inventory.yaml"
        regexp: "use_checkpoint_sync: false"
        line: "          use_checkpoint_sync: true"
        backrefs: true
      run_once: true
      delegate_to: localhost

    - name: Stop Lighthouse container
      ansible.builtin.command: docker stop ephemery-lighthouse
      register: stop_lighthouse
      failed_when: stop_lighthouse.rc != 0 and 'No such container' not in stop_lighthouse.stderr

    - name: Remove Lighthouse container
      ansible.builtin.command: docker rm ephemery-lighthouse
      register: remove_lighthouse
      failed_when: remove_lighthouse.rc != 0 and 'No such container' not in remove_lighthouse.stderr

    - name: Clear Lighthouse database for clean sync
      ansible.builtin.file:
        path: "{{ directories.data }}/lighthouse"
        state: absent

    - name: Create Lighthouse data directory
      ansible.builtin.file:
        path: "{{ directories.data }}/lighthouse"
        state: directory
        mode: "0755"

    - name: Create optimized Lighthouse command
      ansible.builtin.set_fact:
        lighthouse_command: >
          lighthouse beacon_node
          --datadir=/data
          --execution-jwt=/jwt.hex
          --execution-endpoint=http://127.0.0.1:8551
          --http
          --http-address=0.0.0.0
          --http-port=5052
          --metrics
          --metrics-address=0.0.0.0
          --metrics-port=5054
          --checkpoint-sync-url={{ working_checkpoint_url }}
          --checkpoint-sync-url-timeout=300
          --testnet-dir=/ephemery_config
          {% if bootstrap_nodes is defined and bootstrap_nodes | length > 0 %}
          --boot-nodes={{ bootstrap_nodes | join(',') }}
          {% endif %}
          --disable-deposit-contract-sync
          --import-all-attestations
          --disable-backfill-rate-limiting
          --execution-timeout-multiplier=10
          --target-peers=100

    - name: Start new Lighthouse container with checkpoint sync
      ansible.builtin.command: >
        docker run -d --name ephemery-lighthouse
        --network host
        -v {{ directories.data }}/lighthouse:/data
        -v {{ jwt_secret_path }}:/jwt.hex
        {{ client_images.lighthouse }}
        {{ lighthouse_command }}

    - name: Wait for Lighthouse to start syncing
      ansible.builtin.pause:
        seconds: 30

    - name: Check Lighthouse sync status
      ansible.builtin.uri:
        url: http://localhost:5052/eth/v1/node/syncing
        method: GET
        return_content: true
      register: lighthouse_sync
      failed_when: false

    - name: Display Lighthouse sync status
      ansible.builtin.debug:
        msg: >-
          {% if lighthouse_sync.json.data.is_syncing %}
          Lighthouse is syncing - Head slot: {{ lighthouse_sync.json.data.head_slot }},
          Sync distance: {{ lighthouse_sync.json.data.sync_distance }}
          {% else %}
          Lighthouse is fully synced
          {% endif %}
      when: lighthouse_sync.status is defined and lighthouse_sync.status == 200

    # Add network optimizations from fast-sync-tasks.yaml
    - name: Import custom fast sync tasks
      ansible.builtin.import_tasks: ansible/tasks/fast-sync-tasks.yaml

    # Create a checkpoint sync monitoring script
    - name: Create checkpoint sync monitoring script
      ansible.builtin.copy:
        dest: "{{ directories.scripts }}/checkpoint_sync_monitor.sh"
        mode: "0755"
        content: |
          #!/bin/bash
          # checkpoint_sync_monitor.sh

          # Check if checkpoint sync is working correctly
          LIGHTHOUSE_API="http://localhost:5052"

          # Get initial sync status
          INITIAL_STATUS=$(curl -s ${LIGHTHOUSE_API}/eth/v1/node/syncing)
          INITIAL_HEAD_SLOT=$(echo $INITIAL_STATUS | grep -o '"head_slot":"\w*\"' | sed 's/"head_slot":"//g' | sed 's/"//g')
          INITIAL_SYNC_DISTANCE=$(echo $INITIAL_STATUS | grep -o '"sync_distance":"\w*\"' | sed 's/"sync_distance":"//g' | sed 's/"//g')

          echo "Initial head slot: ${INITIAL_HEAD_SLOT}"
          echo "Initial sync distance: ${INITIAL_SYNC_DISTANCE}"

          # Check again after 5 minutes
          sleep 300

          CURRENT_STATUS=$(curl -s ${LIGHTHOUSE_API}/eth/v1/node/syncing)
          CURRENT_HEAD_SLOT=$(echo $CURRENT_STATUS | grep -o '"head_slot":"\w*\"' | sed 's/"head_slot":"//g' | sed 's/"//g')
          CURRENT_SYNC_DISTANCE=$(echo $CURRENT_STATUS | grep -o '"sync_distance":"\w*\"' | sed 's/"sync_distance":"//g' | sed 's/"//g')

          echo "Current head slot: ${CURRENT_HEAD_SLOT}"
          echo "Current sync distance: ${CURRENT_SYNC_DISTANCE}"

          # Calculate progress
          if [ "${CURRENT_HEAD_SLOT}" -eq "${INITIAL_HEAD_SLOT}" ] && [ "${CURRENT_SYNC_DISTANCE}" -eq "${INITIAL_SYNC_DISTANCE}" ]; then
            echo "WARNING: No sync progress detected after 5 minutes. Checkpoint sync may be stuck."
            echo "Attempting recovery..."

            # Check logs for errors
            CHECKPOINT_ERRORS=$(docker logs ephemery-lighthouse --tail 100 | grep -i checkpoint | grep -i error)
            if [ -n "${CHECKPOINT_ERRORS}" ]; then
              echo "Found checkpoint errors: ${CHECKPOINT_ERRORS}"
            fi

            # Potential recovery: restart lighthouse
            echo "Restarting Lighthouse..."
            docker restart ephemery-lighthouse
          else
            SLOTS_PROGRESSED=$(( ${CURRENT_HEAD_SLOT} - ${INITIAL_HEAD_SLOT} ))
            DISTANCE_REDUCED=$(( ${INITIAL_SYNC_DISTANCE} - ${CURRENT_SYNC_DISTANCE} ))

            echo "Sync progress in 5 minutes:"
            echo "Slots progressed: ${SLOTS_PROGRESSED}"
            echo "Distance reduced: ${DISTANCE_REDUCED}"

            if [ ${SLOTS_PROGRESSED} -lt 10 ] && [ ${DISTANCE_REDUCED} -lt 10 ]; then
              echo "WARNING: Sync progress is very slow."
            else
              echo "Checkpoint sync is progressing normally."
            fi
          fi

    # Create directory for log files
    - name: Create log directory for Ephemery
      ansible.builtin.file:
        path: /var/log/ephemery
        state: directory
        mode: "0755"

    # Copy the alert script to the node
    - name: Copy checkpoint sync alert script
      ansible.builtin.copy:
        src: scripts/checkpoint_sync_alert.sh
        dest: "{{ directories.scripts }}/checkpoint_sync_alert.sh"
        mode: "0755"

    # Install the systemd service
    - name: Create systemd service for checkpoint sync alerts
      ansible.builtin.template:
        src: ../templates/checkpoint-sync-alert.service.j2
        dest: /etc/systemd/system/checkpoint-sync-alert.service
        mode: "0644"

    # Enable and start the service
    - name: Enable and start checkpoint sync alert service
      ansible.builtin.systemd:
        name: checkpoint-sync-alert
        state: started
        enabled: true
        daemon_reload: true

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          Checkpoint sync fix has been applied. Here's what was done:
            1. Updated checkpoint sync URL to: {{ working_checkpoint_url }}
            2. Enabled checkpoint sync in inventory
            3. Reset Lighthouse database for clean sync
            4. Added network optimizations
            5. Configured Lighthouse with optimized parameters
            6. Installed checkpoint sync monitoring and alert system

          To monitor the sync progress:
            - Run ./scripts/check_sync_status.sh for a quick status check
            - Run ./{{ directories.scripts }}/checkpoint_sync_monitor.sh to monitor sync progress over time
            - The alert service is running and will notify you of sync issues

          If checkpoint sync continues to fail, consider using genesis sync with optimized parameters.
